<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>从静态页面到元宇宙：用第一性原理拆解前端技术演化史与学习路径</title>
    <link href="/2025/05/06/%E4%BB%8E%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E5%88%B0%E5%85%83%E5%AE%87%E5%AE%99%EF%BC%9A%E7%94%A8%E7%AC%AC%E4%B8%80%E6%80%A7%E5%8E%9F%E7%90%86%E6%8B%86%E8%A7%A3%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%BC%94%E5%8C%96%E5%8F%B2%E4%B8%8E%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/"/>
    <url>/2025/05/06/%E4%BB%8E%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E5%88%B0%E5%85%83%E5%AE%87%E5%AE%99%EF%BC%9A%E7%94%A8%E7%AC%AC%E4%B8%80%E6%80%A7%E5%8E%9F%E7%90%86%E6%8B%86%E8%A7%A3%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%BC%94%E5%8C%96%E5%8F%B2%E4%B8%8E%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h1 id="引言：初学者的困境与破局之道"><a href="#引言：初学者的困境与破局之道" class="headerlink" title="引言：初学者的困境与破局之道"></a>引言：初学者的困境与破局之道</h1><h3 id="1-为什么学前端越学越迷茫？"><a href="#1-为什么学前端越学越迷茫？" class="headerlink" title="1.为什么学前端越学越迷茫？"></a>1.为什么学前端越学越迷茫？</h3><blockquote><p><strong>“学不动了。”</strong></p></blockquote><p>这是大多数前端新手在接触Webpack、Babel、状态管理库等工具时的真实感受。</p><p>jQuery、React、Vue、Angular、Svelte……这些名词像散落的珠子，而框架版本迭代的速度远超学习能力。</p><p>为什么会出现这种困境？</p><p>因为90%的学习者陷入“工具驱动型学习”陷阱：只关注“如何用”，却从未理解“为什么存在”。</p><p>本文将用马斯克第一性原理解构前端发展史，带你用工程师思维梳理工具链本质，建立“从历史看未来”的认知框架。</p><p>最终目标：为初学者构建完整的前端知识坐标系，让学习效率提升300%。</p><h3 id="2-如何用马斯克的学习法建立前端知识骨架？"><a href="#2-如何用马斯克的学习法建立前端知识骨架？" class="headerlink" title="2.如何用马斯克的学习法建立前端知识骨架？"></a>2.如何用马斯克的学习法建立前端知识骨架？</h3><p>马斯克学习法：很多人好奇马斯克的学习秘诀，马斯克曾在 Reddit 论坛里分享过他的学习方法，他的原话是：</p><p><em><strong>One bit of advice: it is important to view knowledge as sort of a semantic tree — make sure you understand the fundamental principles, i.e. the trunk and big branches, before you get into the leaves&#x2F;details or there is nothing for them to hang on to.</strong></em></p><p><em><strong>翻译过来就是：我们应当将知识看作一棵树，只有了解最基本的原理，也就是树干和树枝，才能深入研究细节，没有树干，树叶便无处附着。</strong></em></p><p><strong>Step 1：拆解「前端开发」的本质需求</strong></p><ul><li>第一性原理：”把数据（Data）高效转化为用户界面（UI）并处理交互（Interaction）”</li><li>衍生出三大核心能力：</li></ul><p><img src="/pictures/%E5%89%8D%E7%AB%AF%E6%9C%AC%E8%B4%A8.png"></p><p><strong>Step 2：建立「技术-问题」映射表</strong></p><table><thead><tr><th><strong>你遇到的困惑</strong></th><th><strong>底层问题</strong></th><th><strong>对应技术</strong></th></tr></thead><tbody><tr><td>“CSS怎么写都乱套”</td><td>样式作用域失控</td><td>CSS Modules、Tailwind</td></tr><tr><td>“代码难以维护”</td><td>状态逻辑分散</td><td>Redux、Composition API</td></tr><tr><td>“项目启动太慢”</td><td>构建效率低下</td><td>Vite、TurboPack</td></tr></tbody></table><p><strong>Step 3：构建「最小必要</strong> <strong>知识树</strong> <strong>」</strong></p><ol><li>硬核基础（永远不变）：</li></ol><ul><li>浏览器工作原理（<em><strong>解析→渲染→事件循环</strong></em>）</li><li>HTTP协议与Web安全（CORS、XSS）</li></ul><ol start="2"><li>现代开发护城河：</li></ol><ul><li>组件化思维（React&#x2F;Vue核心设计思想）</li><li>工具链理解（从Babel到Rust编写的打包器）</li></ul><hr><h1 id="《前端工具进化论：从文档标签到元宇宙的底层逻辑》"><a href="#《前端工具进化论：从文档标签到元宇宙的底层逻辑》" class="headerlink" title="《前端工具进化论：从文档标签到元宇宙的底层逻辑》"></a>《前端工具进化论：从文档标签到元宇宙的底层逻辑》</h1><h2 id="前端技术演进的「四个时代」"><a href="#前端技术演进的「四个时代」" class="headerlink" title="前端技术演进的「四个时代」"></a><strong>前端技术演进的「四个时代」</strong></h2><table><thead><tr><th><strong>时代</strong></th><th><strong>核心需求</strong></th><th><strong>代表性技术</strong></th><th><strong>第一性原理</strong></th></tr></thead><tbody><tr><td>石器时代（1990s）</td><td>展示静态文档</td><td>HTML1.0、CSS1.0、表格布局</td><td>「文档标记语言」的本质</td></tr><tr><td>铁器时代（2000s）</td><td>动态交互</td><td>JavaScript、jQuery、AJAX</td><td>「浏览器作为运行时」的潜力</td></tr><tr><td>工业时代（2010s）</td><td>工程化与复杂应用</td><td>Webpack、React、TypeScript</td><td>「模块化」与「状态管理」的博弈</td></tr><tr><td>智能时代（2020s）</td><td>跨端与高性能</td><td>WASM、Web3、微前端、低代码</td><td>「前端边界」的持续突破</td></tr></tbody></table><ul><li><strong>总结：</strong> <em><strong>“所有新工具都是为了解决旧工具的「效率瓶颈」或「能力边界」”</strong></em></li></ul><h2 id="一、石器时代（1990-2004）：文档标记的本质"><a href="#一、石器时代（1990-2004）：文档标记的本质" class="headerlink" title="一、石器时代（1990-2004）：文档标记的本质"></a>一、石器时代（1990-2004）：文档标记的本质</h2><h3 id="核心需求：静态内容展示"><a href="#核心需求：静态内容展示" class="headerlink" title="核心需求：静态内容展示"></a>核心需求：<strong>静态内容展示</strong></h3><p><img src="/pictures/%E5%89%8D%E7%AB%AF%E6%A0%B8%E5%BF%83%E9%9C%80%E6%B1%82.png"></p><h3 id="关键技术解析"><a href="#关键技术解析" class="headerlink" title="关键技术解析"></a>关键技术解析</h3><table><thead><tr><th>技术</th><th>解决问题</th><th>设计缺陷</th><th>现代启示</th></tr></thead><tbody><tr><td>HTML 3.2</td><td>结构化文档</td><td>表现与内容混用</td><td>催生语义化HTML5</td></tr><tr><td>CSS 1.0</td><td>基础样式分离</td><td>布局能力薄弱</td><td>推动Flex&#x2F;Grid布局</td></tr><tr><td>表格布局</td><td>实现复杂版面</td><td>代码臃肿</td><td>促进CSS布局革命</td></tr></tbody></table><p><strong>底层逻辑</strong>：</p><blockquote><p>“Tim Berners-Lee创造HTML的初衷是用标签定义文档结构，而非设计精美网页”</p><p>→ 这解释了为什么早期需要<code>&lt;font&gt;</code>等表现性标签</p></blockquote><p><strong>启示：</strong></p><p><strong>工具的本质是降低认知成本。现代框架的虚拟</strong> <strong>DOM</strong> <strong>、响应式系统，本质上都是对“降低开发复杂度”这一需求的延续。</strong></p><hr><h2 id="二、铁器时代（2004-2010）：浏览器作为运行时"><a href="#二、铁器时代（2004-2010）：浏览器作为运行时" class="headerlink" title="二、铁器时代（2004-2010）：浏览器作为运行时"></a>二、铁器时代（2004-2010）：浏览器作为运行时</h2><h3 id="核心需求：动态交互体验"><a href="#核心需求：动态交互体验" class="headerlink" title="核心需求：动态交互体验"></a>核心需求：<strong>动态交互体验</strong></h3><p><img src="/pictures/%E5%8A%A8%E6%80%81%E4%BA%A4%E4%BA%92%E4%BD%93%E9%AA%8C.png"></p><h3 id="关键技术突破"><a href="#关键技术突破" class="headerlink" title="关键技术突破"></a>关键技术突破</h3><ol><li><strong>jQuery</strong> <strong>的必然性</strong>：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2005年浏览器兼容代码 vs jQuery方案</span><br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">all</span>) &#123; <span class="hljs-comment">// IE</span><br>       elem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-comment">// Netscape</span><br>       elem = <span class="hljs-variable language_">document</span>.<span class="hljs-property">layers</span>[<span class="hljs-string">&#x27;foo&#x27;</span>];<br>   &#125;<br>   <span class="hljs-comment">// jQuery只需：$(&#x27;#foo&#x27;)</span><br></code></pre></td></tr></table></figure><p><strong>第一性原理</strong>：用CSS选择器语法抽象浏览器差异</p><ol start="2"><li><strong>AJAX</strong> <strong>革命</strong>：</li></ol><p><img src="/pictures/Ajax%E9%9D%A9%E5%91%BD.png"></p><p><strong>第一性原理</strong>：用<code>fetch</code>或<code>XHR</code>异步请求数据，局部更新页面，避免整页刷新。</p><p><strong>核心价值：</strong> 让网页像APP一样流畅，不用每次都”闪屏刷新”。</p><h2 id="三、工业时代（2010-2016）：工程化革命"><a href="#三、工业时代（2010-2016）：工程化革命" class="headerlink" title="三、工业时代（2010-2016）：工程化革命"></a>三、工业时代（2010-2016）：工程化革命</h2><h3 id="核心需求：应对复杂应用开发"><a href="#核心需求：应对复杂应用开发" class="headerlink" title="核心需求：应对复杂应用开发"></a>核心需求：<strong>应对复杂应用开发</strong></h3><p><img src="/pictures/%E5%B7%A5%E4%B8%9A%E5%8C%96%E9%9D%A9%E5%91%BD.png"></p><h3 id="三大支柱技术"><a href="#三大支柱技术" class="headerlink" title="三大支柱技术"></a>三大支柱技术</h3><h4 id="1-Webpack的诞生逻辑"><a href="#1-Webpack的诞生逻辑" class="headerlink" title="1. Webpack的诞生逻辑"></a>1. Webpack的诞生逻辑</h4><p>假设有两个文件：</p><h5 id="文件-1：math-js"><a href="#文件-1：math-js" class="headerlink" title="文件 1：math.js"></a>文件 1：<code>math.js</code></h5><pre><code class="hljs">// math.jsfunction add(a, b) &#123;return a + b; &#125;    // 计算数字相加这个 add 函数会被挂载到全局作用域（window.add）。</code></pre><h5 id="文件-2：string-utils-js"><a href="#文件-2：string-utils-js" class="headerlink" title="文件 2：string-utils.js"></a>文件 2：<code>string-utils.js</code></h5><pre><code class="hljs">// string-utils.jsfunction add(str1, str2) &#123;return str1 + str2; &#125;    // 字符串拼接这个 add 函数也会被挂载到全局作用域（window.add）。</code></pre><h5 id="Webpack-如何解决这个问题？"><a href="#Webpack-如何解决这个问题？" class="headerlink" title="Webpack 如何解决这个问题？"></a><strong>Webpack 如何解决这个问题？</strong></h5><p>Webpack 使用<strong>模块化</strong> <strong>作用域</strong>，确保每个文件的变量和函数不会污染全局：</p><h5 id="改造后的代码（ES-Modules）"><a href="#改造后的代码（ES-Modules）" class="headerlink" title="改造后的代码（ES Modules）"></a>改造后的代码（ES Modules）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">// math.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123; <span class="hljs-keyword">return</span> a + b; &#125;<br><br><span class="hljs-comment">// string-utils.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">str1, str2</span>) &#123; <span class="hljs-keyword">return</span> str1 + str2; &#125;<br><br><span class="hljs-comment">// app.js</span><br><span class="hljs-keyword">import</span> &#123; add <span class="hljs-keyword">as</span> mathAdd &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./math.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; add <span class="hljs-keyword">as</span> strAdd &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./string-utils.js&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">mathAdd</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));       <span class="hljs-comment">// 3（数字相加）</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">strAdd</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>));      <span class="hljs-comment">// &quot;ab&quot;（字符串拼接） </span><br></code></pre></td></tr></table></figure><ul><li><p><strong>关键点</strong>：</p><ul><li>每个文件的 <code>add</code> 函数<strong>互不干扰</strong>。</li><li>通过 <code>import &#123; ... as ... &#125;</code> 可以避免命名冲突。</li></ul></li></ul><h4 id="2-React的设计哲学"><a href="#2-React的设计哲学" class="headerlink" title="2. React的设计哲学"></a>2. React的设计哲学</h4><pre><code class="hljs">// 对比命令式与声明式// jQuery命令式$(&#39;#btn&#39;).click(function() &#123;  $(&#39;#counter&#39;).text(parseInt($(&#39;#counter&#39;).text()) + 1);&#125;);// React声明式function Counter() &#123;  const [count, setCount] = useState(0);  return &lt;button onClick=&#123;() =&gt; setCount(c =&gt; c + 1)&#125;&gt;&#123;count&#125;&lt;/button&gt;;&#125;</code></pre><ul><li><strong>第一性原理</strong>：UI应是状态的函数（<code>UI = f(state)</code>）</li></ul><h4 id="3-TypeScript的价值"><a href="#3-TypeScript的价值" class="headerlink" title="3. TypeScript的价值"></a>3. TypeScript的价值</h4><pre><code class="hljs">// JavaScript的痛点function sum(a, b) &#123;  return a + b; // 可能被传入字符串&#125;// TypeScript解决方案function sum(a: number, b: number): number &#123;  return a + b;&#125;</code></pre><ul><li><strong>底层需求</strong>：大型应用需要编译时类型检查</li></ul><hr><h2 id="四、智能时代（2020-至今）：突破边界"><a href="#四、智能时代（2020-至今）：突破边界" class="headerlink" title="四、智能时代（2020-至今）：突破边界"></a>四、智能时代（2020-至今）：突破边界</h2><h3 id="核心需求：极致性能与多端统一"><a href="#核心需求：极致性能与多端统一" class="headerlink" title="核心需求：极致性能与多端统一"></a>核心需求：<strong>极致性能与多端统一</strong></h3><p><img src="/pictures/%E6%99%BA%E8%83%BD%E6%97%B6%E4%BB%A3.png"></p><h3 id="关键技术解析-1"><a href="#关键技术解析-1" class="headerlink" title="关键技术解析"></a>关键技术解析</h3><h4 id="1-WebAssembly的突破"><a href="#1-WebAssembly的突破" class="headerlink" title="1. WebAssembly的突破"></a>1. WebAssembly的突破</h4><p><strong>第一性原理</strong>：将低级语言（C&#x2F;C++&#x2F;Rust）编译为浏览器可执行的二进制格式，突破JS性能瓶颈。 <strong>代码示例</strong>：</p><pre><code class="hljs"> // add.cpp → add.wasmint add(int a, int b) &#123; return a + b; &#125;</code></pre><!----><pre><code class="hljs"> // 浏览器调用WebAssembly.instantiateStreaming(fetch(&#39;add.wasm&#39;)).then(obj =&gt; obj.instance.exports.add(2, 3)); // 5</code></pre><p><strong>核心价值</strong>：高性能计算（游戏&#x2F;音视频）在Web端原生运行。</p><h4 id="2-微前端架构"><a href="#2-微前端架构" class="headerlink" title="2. 微前端架构"></a>2. 微前端架构</h4><p><strong>第一性原理</strong>：将后端微服务思想移植到前端,把大系统拆成独立可组合的小应用</p><pre><code class="hljs">主框架（共享依赖）├─ 商品页（React应用）├─ 订单页（Vue应用）└─ 支付页（Angular应用）</code></pre><p><strong>核心价值</strong>： 各团队用不同技术开发，随时单独更新</p><h4 id="3-低代码平台的兴起"><a href="#3-低代码平台的兴起" class="headerlink" title="3. 低代码平台的兴起"></a>3. 低代码平台的兴起</h4><p><strong>第一性原理</strong>：用可视化拖拽代替手写代码 <strong>类比</strong>：</p><ul><li>传统开发 &#x3D; 从烧砖开始盖房</li><li>低代码 &#x3D; 用乐高积木搭房</li></ul><p><strong>操作示例</strong>：</p><pre><code class="hljs"> #传统代码（实现表单）&lt;form @submit=&quot;saveData&quot;&gt;&lt;input v-model=&quot;name&quot;&gt;&lt;button&gt;提交&lt;/button&gt;&lt;/form&gt;# 低代码（拖拽生成）[拖拽&quot;表单组件&quot; → 设置&quot;提交API&quot; → 自动生成代码]</code></pre><p><strong>核心价值</strong>：  业务人员也能快速搭建简单系统</p><hr><h2 id="五、工具演进的底层规律"><a href="#五、工具演进的底层规律" class="headerlink" title="五、工具演进的底层规律"></a>五、工具演进的底层规律</h2><ol><li><h3 id="越来越简单"><a href="#越来越简单" class="headerlink" title="越来越简单"></a><strong>越来越简单</strong></h3></li></ol><ul><li>以前：要写很多底层代码（如DOM操作）</li><li>现在：声明式写法（如React）</li><li>例子：jQuery → Vue</li></ul><ol start="2"><li><h3 id="越来越快"><a href="#越来越快" class="headerlink" title="越来越快"></a><strong>越来越快</strong></h3></li></ol><ul><li>以前：JS运行慢</li><li>现在：WASM接近机器码速度</li><li>例子：网页游戏性能提升</li></ul><ol start="3"><li><h3 id="越来越灵活"><a href="#越来越灵活" class="headerlink" title="越来越灵活"></a><strong>越来越灵活</strong></h3></li></ol><ul><li>以前：整个页面一起更新</li><li>现在：可以单独更新某个组件</li><li>例子：微前端架构</li></ul><ol start="4"><li><h3 id="越来越智能"><a href="#越来越智能" class="headerlink" title="越来越智能"></a><strong>越来越智能</strong></h3></li></ol><ul><li><p>以前：全靠人工写代码</p></li><li><p>现在：AI辅助生成代码</p></li><li><p>例子：低代码平台</p></li></ul><p><strong>一句话总结</strong>：</p><p>前端工具正在变得<strong>更简单、更快、更灵活、更智能</strong>，让开发者能更轻松地做出更好的网页应用。</p><h1 id="结语：认知复利的力量"><a href="#结语：认知复利的力量" class="headerlink" title="结语：认知复利的力量"></a>结语：认知复利的力量</h1><p>前端学习本质是认知结构的搭建。</p><p>当你用历史视角理解Webpack为何存在（解决模块化困局）、React的虚拟DOM本质（用数据抽象优化性能损耗）、Babel的核心价值（语法转换的编译思维）时，零散的名词会自动串联成「 <strong>解码器-地图-工具链</strong>」的认知体系。</p><p>所有技术都遵循「<strong>需求催生工具→工具塑造实践→实践反哺认知</strong>」的闭环。</p><p>与其追逐新名词，不如用历史思维构建自己的「技术演进逻辑网」，让学习从被动输入变为主动解码。</p><p>行动点： 下次学新工具时，可以尝试先问三个问题：</p><ol><li>它要解决什么历史问题？</li><li>它的核心设计原则是什么？</li><li>它与旧方案的本质差异在哪？</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/03/hello-world/"/>
    <url>/2025/04/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
