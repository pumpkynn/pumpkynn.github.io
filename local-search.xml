<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端HTTP请求工具发展史</title>
    <link href="/2025/09/21/%E5%89%8D%E7%AB%AFHTTP%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
    <url>/2025/09/21/%E5%89%8D%E7%AB%AFHTTP%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7%E5%8F%91%E5%B1%95%E5%8F%B2/</url>
    
    <content type="html"><![CDATA[<p>众所周知，前端的主要职责是将数据呈现给用户，并提供用户与数据交互的入口。用户所见的绝大多数数据，都来源于后端。但在早期的静态网页中，页面仅具备基础的展示能力——一旦数据发生变化，就必须手动更新页面内容。这种局限性推动了 HTTP 请求的发展：前端需要主动发起请求以获取最新数据，而当用户通过前端修改数据时，也需借助 HTTP 请求通知后端进行更新。</p><p>本文将从 HTTP 请求工具的演进历程出发，探讨它们在前端开发中的应用与演变。</p><h3 id="一、技术演进"><a href="#一、技术演进" class="headerlink" title="一、技术演进"></a>一、技术演进</h3><h4 id="1-XMLHttpRequest（2005-年）-最早的-AJAX-实现"><a href="#1-XMLHttpRequest（2005-年）-最早的-AJAX-实现" class="headerlink" title="1. XMLHttpRequest（2005 年）- 最早的 AJAX 实现"></a>1. XMLHttpRequest（2005 年）- 最早的 AJAX 实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 场景：获取用户列表</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUsers</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 创建一个新的 XMLHttpRequest 对象，用于发送 HTTP 请求</span><br>  <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br><br>  <span class="hljs-comment">// 初始化一个 GET 请求，请求目标为 &#x27;/api/users&#x27;</span><br>  xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;/api/users&quot;</span>);<br><br>  <span class="hljs-comment">// 设置 onreadystatechange 事件处理函数，用于处理请求状态变化</span><br>  xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 当请求完成（readyState 为 4）且响应状态码为 200（成功）时</span><br>    <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>      <span class="hljs-comment">// 解析响应返回的 JSON 数据为 JavaScript 对象</span><br>      <span class="hljs-keyword">const</span> users = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>);<br><br>      <span class="hljs-comment">// 调用 displayUsers 函数，将解析后的用户数据传递给该函数进行展示</span><br>      <span class="hljs-title function_">displayUsers</span>(users);<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">// 发送请求</span><br>  xhr.<span class="hljs-title function_">send</span>();<br>&#125;<br><br><span class="hljs-comment">// 用于展示用户列表的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">displayUsers</span>(<span class="hljs-params">users</span>) &#123;<br>  <span class="hljs-comment">//具体实现代码省略</span><br>&#125;<br><span class="hljs-comment">// 特点：</span><br><span class="hljs-comment">// - 代码冗长</span><br><span class="hljs-comment">// - 需要手动处理状态</span><br><span class="hljs-comment">// - 兼容性好</span><br><span class="hljs-comment">// - 所有浏览器都支持</span><br></code></pre></td></tr></table></figure><h4 id="2-jQuery-AJAX（2006-年）-简化-AJAX-操作"><a href="#2-jQuery-AJAX（2006-年）-简化-AJAX-操作" class="headerlink" title="2. jQuery AJAX（2006 年）- 简化 AJAX 操作"></a>2. jQuery AJAX（2006 年）- 简化 AJAX 操作</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 场景：获取用户列表</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用 jQuery 的 AJAX 方法获取用户列表</span><br><span class="hljs-comment"> * 这是对原始 XMLHttpRequest 方式的封装和简化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUsers</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 使用 jQuery 的 $.ajax 方法发送 HTTP 请求</span><br>  $.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/api/users&quot;</span>, <span class="hljs-comment">// 请求的 URL 地址</span><br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-comment">// 请求方法为 GET</span><br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>, <span class="hljs-comment">// 预期服务器返回的数据类型为 JSON</span><br><br>    <span class="hljs-comment">// 请求成功时的回调函数</span><br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">users</span>) &#123;<br>      <span class="hljs-comment">// 调用 displayUsers 函数展示获取到的用户数据</span><br>      <span class="hljs-title function_">displayUsers</span>(users);<br>    &#125;,<br><br>    <span class="hljs-comment">// 请求失败时的回调函数</span><br>    <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">xhr, status, error</span>) &#123;<br>      <span class="hljs-comment">// 在控制台输出错误信息，便于调试</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;请求失败:&quot;</span>, error);<br>    &#125;,<br>  &#125;);<br>&#125;<br><br><span class="hljs-comment">// 在页面上展示用户列表</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">displayUsers</span>(<span class="hljs-params">users</span>) &#123;<br>  <span class="hljs-comment">//具体实现代码省略</span><br>&#125;<br><br><span class="hljs-comment">// 特点：</span><br><span class="hljs-comment">// - 代码简洁</span><br><span class="hljs-comment">// - 自动处理兼容性</span><br><span class="hljs-comment">// - 需要引入 jQuery</span><br><span class="hljs-comment">// - 功能丰富</span><br></code></pre></td></tr></table></figure><h4 id="3-fetch-API（2015-年）-现代浏览器的原生-API"><a href="#3-fetch-API（2015-年）-现代浏览器的原生-API" class="headerlink" title="3. fetch API（2015 年）- 现代浏览器的原生 API"></a>3. fetch API（2015 年）- 现代浏览器的原生 API</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 场景：获取用户列表</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用现代 Fetch API 异步获取用户列表</span><br><span class="hljs-comment"> * 采用 async/await 语法，使异步代码更清晰易读</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getUsers</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 使用 Fetch API 发送 GET 请求到 &#x27;/api/users&#x27;</span><br>    <span class="hljs-comment">// await 会等待请求完成并返回 Response 对象</span><br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/users&quot;</span>);<br><br>    <span class="hljs-comment">// 检查响应状态，如果不是 200-299 范围内的状态码，则抛出错误</span><br>    <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`HTTP error! status: <span class="hljs-subst">$&#123;response.status&#125;</span>`</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 将响应内容解析为 JSON 格式，await 会等待解析完成</span><br>    <span class="hljs-keyword">const</span> users = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br><br>    <span class="hljs-comment">// 调用 displayUsers 函数展示获取到的用户数据</span><br>    <span class="hljs-title function_">displayUsers</span>(users);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-comment">// 捕获并处理请求或解析过程中可能出现的任何错误</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;请求失败:&quot;</span>, error);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 在页面上展示用户列表</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">displayUsers</span>(<span class="hljs-params">users</span>) &#123;<br>  <span class="hljs-comment">//具体实现代码省略</span><br>&#125;<br><span class="hljs-comment">// 特点：</span><br><span class="hljs-comment">// - 原生支持</span><br><span class="hljs-comment">// - 基于 Promise</span><br><span class="hljs-comment">// - 不需要第三方库</span><br><span class="hljs-comment">// - 现代浏览器支持</span><br></code></pre></td></tr></table></figure><h4 id="4-axios（2014-年至今）-功能强大的第三方库"><a href="#4-axios（2014-年至今）-功能强大的第三方库" class="headerlink" title="4. axios（2014 年至今）- 功能强大的第三方库"></a>4. axios（2014 年至今）- 功能强大的第三方库</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 场景：获取用户列表</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用 axios 异步获取用户列表</span><br><span class="hljs-comment"> * axios 是一个基于 Promise 的 HTTP 客户端库</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getUsers</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 使用 axios 发送 GET 请求到 &#x27;/api/users&#x27;</span><br>    <span class="hljs-comment">// await 会等待请求完成并返回响应对象</span><br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/api/users&quot;</span>);<br><br>    <span class="hljs-comment">// 从响应对象的 data 属性中获取服务器返回的数据</span><br>    <span class="hljs-comment">// axios 会自动将 JSON 数据解析为 JavaScript 对象</span><br>    <span class="hljs-title function_">displayUsers</span>(response.<span class="hljs-property">data</span>);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-comment">// 捕获并处理请求过程中可能出现的任何错误</span><br>    <span class="hljs-comment">// axios 会自动处理 HTTP 错误状态码（如 404、500 等）</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;请求失败:&quot;</span>, error);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 在页面上展示用户列表</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">displayUsers</span>(<span class="hljs-params">users</span>) &#123;<br>  <span class="hljs-comment">//具体实现代码省略</span><br>&#125;<br><br><span class="hljs-comment">// 特点：</span><br><span class="hljs-comment">// - 功能强大</span><br><span class="hljs-comment">// - 自动 JSON 解析</span><br><span class="hljs-comment">// - 请求/响应拦截</span><br><span class="hljs-comment">// - 错误处理完善</span><br></code></pre></td></tr></table></figure><h3 id="二、抽象层级与开发体验"><a href="#二、抽象层级与开发体验" class="headerlink" title="二、抽象层级与开发体验"></a>二、抽象层级与开发体验</h3><p>用例子带你直观感受它们的区别：</p><ul><li><strong>XMLHttpRequest (XHR)</strong>：像是<strong>手动组装一台电脑</strong>。你需要处理所有底层细节（readyState 变化、状态码检查、JSON 解析），代码非常冗长和重复。</li><li><strong>jQuery AJAX</strong>：像是<strong>购买一台品牌台式机</strong>。它帮你封装了所有兼容性和基础操作，你只需要插电（调用 API）就能用，代码简洁了很多。但它要求你整个“房间”（项目）都使用 jQuery 这个“品牌”。</li><li><strong>fetch</strong>：像是<strong>购买一台现代笔记本</strong>。它是官方原生的（浏览器内置），语法更现代、简洁（基于 Promise）。但出厂设置比较基础（不自动抛出 HTTP 错误，需手动解析 JSON），需要你自己“安装软件”（进行封装）才好用。</li><li><strong>axios</strong>：像是<strong>购买一台顶配游戏本</strong>。它基于原生（fetch&#x2F;XHR）但提供了所有你需要的功能：自动 JSON 转换、自动错误处理、拦截器、取消请求等。开箱即用，体验极佳。</li></ul><h3 id="三、工具对比总结"><a href="#三、工具对比总结" class="headerlink" title="三、工具对比总结"></a>三、工具对比总结</h3><table><thead><tr><th>特性</th><th>XMLHttpRequest</th><th>jQuery AJAX</th><th>fetch API</th><th>axios</th></tr></thead><tbody><tr><td><strong>发布时间</strong></td><td>2005 年</td><td>2006 年</td><td>2015 年</td><td>2014 年</td></tr><tr><td><strong>代码简洁度</strong></td><td>冗长</td><td>中等</td><td>简洁</td><td>非常简洁</td></tr><tr><td><strong>Promise</strong></td><td>需封装</td><td>支持</td><td>原生支持</td><td>原生支持</td></tr><tr><td><strong>JSON 处理</strong></td><td>手动解析</td><td>自动</td><td>需调用.json()</td><td>自动</td></tr><tr><td><strong>错误处理</strong></td><td>手动检查状态码</td><td>内置 error 回调</td><td>需手动检查 ok 状态</td><td>自动抛出 HTTP 错误</td></tr><tr><td><strong>兼容性</strong></td><td>全浏览器支持</td><td>需引入 jQuery</td><td>现代浏览器</td><td>全浏览器支持</td></tr><tr><td><strong>依赖关系</strong></td><td>无</td><td>依赖 jQuery</td><td>无</td><td>需安装</td></tr><tr><td><strong>推荐场景</strong></td><td>学习原理、兼容老项目</td><td>传统 jQuery 项目</td><td>现代简单项目</td><td>Vue&#x2F;React 等现代项目</td></tr></tbody></table><h3 id="四、选择建议"><a href="#四、选择建议" class="headerlink" title="四、选择建议"></a>四、选择建议</h3><h4 id="1-根据项目类型选择"><a href="#1-根据项目类型选择" class="headerlink" title="1. 根据项目类型选择"></a>1. 根据项目类型选择</h4><table><thead><tr><th>项目类型</th><th>推荐工具</th><th>原因</th></tr></thead><tbody><tr><td>简单页面</td><td>fetch</td><td>原生支持，无需依赖</td></tr><tr><td>传统项目</td><td>jQuery AJAX</td><td>兼容性好，生态完善</td></tr><tr><td>Vue&#x2F;React</td><td>axios</td><td>功能强大，易用</td></tr><tr><td>大型项目</td><td>axios + 拦截器</td><td>统一处理，易于管理</td></tr></tbody></table><h4 id="2-根据需求选择"><a href="#2-根据需求选择" class="headerlink" title="2. 根据需求选择"></a>2. 根据需求选择</h4><table><thead><tr><th>需求</th><th>推荐工具</th><th>原因</th></tr></thead><tbody><tr><td>简单请求</td><td>fetch</td><td>原生支持，代码简洁</td></tr><tr><td>复杂请求</td><td>axios</td><td>功能丰富，错误处理完善</td></tr><tr><td>兼容性要求高</td><td>XMLHttpRequest</td><td>所有浏览器都支持</td></tr><tr><td>快速开发</td><td>axios</td><td>功能强大，开发效率高</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写在前面的面试技巧分享</title>
    <link href="/2025/09/14/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB/"/>
    <url>/2025/09/14/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2%E7%9A%84%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<p>在经历了两次比较正式的技术面试之后，我也开始反思自己的不足，找一些方法，去提高自己的面试水平，这篇文章接下来的分享内容都是来自于一档求职综艺《令人心动的 offer》第五季实习生<strong>王艺妍妤</strong>的分享，共勉</p><h3 id="在面试的时候，怎么能做到这么的自如，松弛？"><a href="#在面试的时候，怎么能做到这么的自如，松弛？" class="headerlink" title="在面试的时候，怎么能做到这么的自如，松弛？"></a>在面试的时候，怎么能做到这么的自如，松弛？</h3><ol><li>第一点就是你的面试官看似咄咄逼人，刨根问底，但他其实是真的想了解你，<strong>想了解你跟当下的这个岗位的适配度怎么样，以及想了解你说的这些事情到底是不是真实的</strong>，主要就是这两大目的，所以面对面试官的步步紧逼，不要太慌，搞清楚这一点，有助于我们放下对面试官的偏见，那么在面对面试官的时候，心态也自然能好一点</li><li>第二点就是在关键的时候，我们反而要<strong>把大事看小，不要太注重结果</strong>，告诉自己其实失败了也没有关系，因为明天天不会就塌下来，太阳还是会照常升起，而且<strong>找工作本身就是一个双向选择的过程</strong>，在你面试的时候，不仅仅是面试官在了解你，其实你也在了解这家公司，当你<strong>把自己的位置摆正，有选择权之后</strong>，心态上也会放松一些</li><li>最后一点就是<strong>尽量保持真诚，不要伪装太多东西</strong>，因为”<strong>极度的坦诚就是无坚不摧</strong>“，面试的时候伪装最难受的后果就是，哪怕你真的入职了也干的并不开心，每天都心惊胆战</li></ol><h3 id="自我介绍要点"><a href="#自我介绍要点" class="headerlink" title="自我介绍要点"></a><strong>自我介绍要点</strong></h3><p>首先明白，自我介绍的作用是什么？这里继续引用<strong>妍妤</strong>分享的一些观点</p><ol><li><p>你在自我介绍的时候，面试官正在翻你的简历，所以<strong>自我介绍非常重要的一个作用就是指引作用</strong>，是<strong>带着面试官的眼睛去看你简历里的那些出彩的地方</strong>，所以介绍完自己的姓名，教育背景等基本信息后，大家就可以尝试带着面试官的注意力，去到你简历上的那些亮眼的部分，<strong>比如说你可能有一次得了一个厉害的奖项，那你就可以告诉面试官为了得到这个奖项，你付出了哪些努力，在得到这个奖之后呢，你又有了哪些成长和感悟，这整个过程中，你培养了哪些技能点，是跟这个岗位高度适配的</strong>，总而言之，既然已经坐在了面试官的面前，就不要放过这次推销自己的机会</p></li><li><p>我在做自我介绍的时候，其实不会把我的方方面面都介绍的非常具体，因为<strong>有时候面面俱到就意味着没有重点</strong>，而当你详略得当的时候，反而有可能让面试官更加关注那些你想让他关注的东西</p><h3 id="回答面试问题"><a href="#回答面试问题" class="headerlink" title="回答面试问题"></a>回答面试问题</h3><p>那一般在做完自我介绍之后，面试官可能还会问你一些问题，那么在回答这些问题的时候，有一个万变不离其宗的原则就是，<strong>你的回答要么就是突出你具备和这个岗位适配的专业技能，要么就是突出你跟这个岗位有适配的性格特点</strong>，这些问题的中间有一个我想单独拿出来和大家分享的点就是，当面试官聊起，或者要求你<strong>聊起以前一些你失败的经历或者是你的缺点的时候</strong>，我们应该怎么回答，我想告诉大家的就是，<strong>其实面试官他并不是不允许你失败，或者是不允许你有缺点</strong>，其实他是想知道<strong>你有没有在跌倒之后重新站起来的能力，以及有没有从失败中学习成长的能力，以及有没有认识自己，尤其是认识自己的不足，并且能够付出努力，去弥补自己这些不足的能力</strong>，所以说回答这个问题比较好的解决方法就是，把整个问题回答的<strong>重点放在你的成长收获和感悟上面</strong>，而不是只傻傻的去讨论自己失败的这件事情。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>关于面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重新理解JavaScript数据类型：值类型 vs 引用类型</title>
    <link href="/2025/09/07/%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3JavaScript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%9A%E5%80%BC%E7%B1%BB%E5%9E%8B-vs-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <url>/2025/09/07/%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3JavaScript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%9A%E5%80%BC%E7%B1%BB%E5%9E%8B-vs-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>在编程中，理解数据如何存储和传递是至关重要的。JavaScript 将数据类型分为两大阵营，它们的行为有着根本性的不同。让我们彻底搞懂这个核心概念。</p><h2 id="核心概念：两种不同的处理方式"><a href="#核心概念：两种不同的处理方式" class="headerlink" title="核心概念：两种不同的处理方式"></a>核心概念：两种不同的处理方式</h2><h3 id="原始类型：直接操作值本身"><a href="#原始类型：直接操作值本身" class="headerlink" title="原始类型：直接操作值本身"></a>原始类型：直接操作值本身</h3><p>原始类型在变量中直接存储数据的实际值。当你操作这些数据时，你就是在直接操作值本身。</p><h3 id="引用类型：通过地址间接操作"><a href="#引用类型：通过地址间接操作" class="headerlink" title="引用类型：通过地址间接操作"></a>引用类型：通过地址间接操作</h3><p>引用类型在变量中存储的是数据在内存中的地址（引用），而不是数据本身。当你操作这些数据时，你是通过地址来间接访问和修改实际的数据。</p><h2 id="原始类型：值的直接存储"><a href="#原始类型：值的直接存储" class="headerlink" title="原始类型：值的直接存储"></a>原始类型：值的直接存储</h2><p>原始类型有 7 种，它们都是不可变的（immutable）：</p><table><thead><tr><th>类型</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>Number</td><td><code>let age = 25</code></td><td>数字，包括整数和浮点数</td></tr><tr><td>String</td><td><code>let name = &quot;Alice&quot;</code></td><td>字符串文本</td></tr><tr><td>Boolean</td><td><code>let isActive = true</code></td><td>布尔值 true&#x2F;false</td></tr><tr><td>Undefined</td><td><code>let value</code></td><td>未赋值的变量</td></tr><tr><td>Null</td><td><code>let data = null</code></td><td>明确的无值状态</td></tr><tr><td>BigInt</td><td><code>let big = 123n</code></td><td>大整数</td></tr><tr><td>Symbol</td><td><code>let id = Symbol()</code></td><td>唯一标识符</td></tr></tbody></table><p><strong>关键特性：</strong></p><ul><li>变量直接包含值</li><li>赋值时创建值的副本</li><li>比较时比较实际值</li><li>值本身不可改变</li></ul><h2 id="引用类型：地址的间接访问"><a href="#引用类型：地址的间接访问" class="headerlink" title="引用类型：地址的间接访问"></a>引用类型：地址的间接访问</h2><p>引用类型都是对象的不同形式：</p><table><thead><tr><th>类型</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>Object</td><td><code>let obj = &#123;&#125;</code></td><td>普通对象</td></tr><tr><td>Array</td><td><code>let arr = []</code></td><td>数组</td></tr><tr><td>Function</td><td><code>function fn() &#123;&#125;</code></td><td>函数</td></tr><tr><td>Date</td><td><code>new Date()</code></td><td>日期对象</td></tr><tr><td>其他</td><td><code>Map</code>, <code>Set</code>等</td><td>其他内置对象</td></tr></tbody></table><p><strong>关键特性：</strong></p><ul><li>变量存储的是内存地址</li><li>赋值时复制地址，而不是数据</li><li>比较时比较内存地址</li><li>数据内容可以改变</li></ul><h2 id="内存模型：理解底层差异"><a href="#内存模型：理解底层差异" class="headerlink" title="内存模型：理解底层差异"></a>内存模型：理解底层差异</h2><h3 id="原始类型的内存模型"><a href="#原始类型的内存模型" class="headerlink" title="原始类型的内存模型"></a>原始类型的内存模型</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let a <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">;    // 内存中：变量a → 值10</span><br>let b <span class="hljs-operator">=</span> a<span class="hljs-comment">;     // 内存中：变量b → 新值10（副本）</span><br><span class="hljs-attribute">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span><span class="hljs-comment">;        // 变量b → 新值20，变量a保持不变</span><br></code></pre></td></tr></table></figure><h3 id="引用类型的内存模型"><a href="#引用类型的内存模型" class="headerlink" title="引用类型的内存模型"></a>引用类型的内存模型</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">let</span> obj1 = &#123; count: <span class="hljs-number">0</span> &#125;;  // 变量obj1 → 地址<span class="hljs-number">0</span>x123 → 对象&#123;count: <span class="hljs-number">0</span>&#125;<br><span class="hljs-attribute">let</span> obj2 = obj1;          // 变量obj2 → 同样的地址<span class="hljs-number">0</span>x123 → 同一个对象<br><span class="hljs-attribute">obj2</span>.count = <span class="hljs-number">5</span>;           // 通过地址修改对象，obj1.count也变成<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h2 id="实际代码对比"><a href="#实际代码对比" class="headerlink" title="实际代码对比"></a>实际代码对比</h2><h3 id="赋值行为的差异"><a href="#赋值行为的差异" class="headerlink" title="赋值行为的差异"></a>赋值行为的差异</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 原始类型：值复制</span><br><span class="hljs-keyword">let</span> originalValue = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">let</span> copiedValue = originalValue; <span class="hljs-comment">// 创建新副本</span><br>copiedValue = <span class="hljs-number">200</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(originalValue); <span class="hljs-comment">// 100 - 原值不变</span><br><br><span class="hljs-comment">// 引用类型：地址复制</span><br><span class="hljs-keyword">let</span> originalObject = &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">100</span> &#125;;<br><span class="hljs-keyword">let</span> copiedObject = originalObject; <span class="hljs-comment">// 复制地址</span><br>copiedObject.<span class="hljs-property">value</span> = <span class="hljs-number">200</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(originalObject.<span class="hljs-property">value</span>); <span class="hljs-comment">// 200 - 原对象被修改</span><br></code></pre></td></tr></table></figure><h3 id="比较行为的差异"><a href="#比较行为的差异" class="headerlink" title="比较行为的差异"></a>比较行为的差异</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 原始类型：值比较</span><br><span class="hljs-keyword">let</span> num1 = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">let</span> num2 = <span class="hljs-number">5</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num1 === num2); <span class="hljs-comment">// true - 值相同</span><br><br><span class="hljs-comment">// 引用类型：地址比较</span><br><span class="hljs-keyword">let</span> obj1 = &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">5</span> &#125;;<br><span class="hljs-keyword">let</span> obj2 = &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">5</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1 === obj2); <span class="hljs-comment">// false - 地址不同</span><br><br><span class="hljs-keyword">let</span> obj3 = obj1;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1 === obj3); <span class="hljs-comment">// true - 地址相同</span><br></code></pre></td></tr></table></figure><h3 id="函数参数传递的差异"><a href="#函数参数传递的差异" class="headerlink" title="函数参数传递的差异"></a>函数参数传递的差异</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">modifyValue</span>(<span class="hljs-params">primitive, reference</span>) &#123;<br>    primitive = <span class="hljs-number">100</span>; <span class="hljs-comment">// 不影响外部变量</span><br>    reference.value = <span class="hljs-number">100</span>; <span class="hljs-comment">// 会影响外部对象</span><br>&#125;<br><br>let num = <span class="hljs-number">1</span>;<br>let obj = &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">1</span> &#125;;<br><br>modifyValue(num, obj);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(num); <span class="hljs-comment">// 1 - 不变</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.value); <span class="hljs-comment">// 100 - 被修改</span><br></code></pre></td></tr></table></figure><h2 id="为什么需要这样的设计？"><a href="#为什么需要这样的设计？" class="headerlink" title="为什么需要这样的设计？"></a>为什么需要这样的设计？</h2><h3 id="原始类型的优势"><a href="#原始类型的优势" class="headerlink" title="原始类型的优势"></a>原始类型的优势</h3><ol><li><strong>性能高效</strong>：操作简单值很快</li><li><strong>线程安全</strong>：不可变性避免并发问题</li><li><strong>预测性强</strong>：值不会意外改变</li></ol><h3 id="引用类型的优势"><a href="#引用类型的优势" class="headerlink" title="引用类型的优势"></a>引用类型的优势</h3><ol><li><strong>内存效率</strong>：大型对象不需要多次复制</li><li><strong>状态共享</strong>：多个部分可以访问同一数据</li><li><strong>动态结构</strong>：可以灵活修改和扩展</li></ol><p>掌握值类型与引用类型的区别，不仅能帮助你避免难以调试的意外数据修改问题，更能让你在内存管理、性能优化和代码架构设计上做出更明智的决策，这是成为 JavaScript 高手的重要基石！</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 循环指南：区别与选择</title>
    <link href="/2025/09/07/JS-%E5%BE%AA%E7%8E%AF%E6%8C%87%E5%8D%97%EF%BC%9A%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%80%89%E6%8B%A9/"/>
    <url>/2025/09/07/JS-%E5%BE%AA%E7%8E%AF%E6%8C%87%E5%8D%97%EF%BC%9A%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%80%89%E6%8B%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="JS-循环指南：区别与选择"><a href="#JS-循环指南：区别与选择" class="headerlink" title="JS 循环指南：区别与选择"></a>JS 循环指南：区别与选择</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript 提供了多种循环方式，每种都有其特定的用途。了解它们的区别对于编写高效代码至关重要。本文将简要介绍各种循环及其适用场景。</p><h2 id="循环类型详解"><a href="#循环类型详解" class="headerlink" title="循环类型详解"></a>循环类型详解</h2><h3 id="1-传统-for-循环"><a href="#1-传统-for-循环" class="headerlink" title="1. 传统 for 循环"></a>1. 传统 for 循环</h3><p><strong>for</strong> 循环是最经典且灵活的循环结构，特别适合已知循环次数的场景。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 基本语法</span><br><span class="hljs-keyword">for</span> (初始化; 条件; 增量) &#123;<br>  <span class="hljs-comment">// 循环体</span><br>&#125;<br><br><span class="hljs-comment">// 实际示例</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`当前索引: <span class="hljs-subst">$&#123;i&#125;</span>`</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-while-循环"><a href="#2-while-循环" class="headerlink" title="2. while 循环"></a>2. while 循环</h3><p><strong>while</strong> 循环在<strong>不确定循环次数</strong>但需要满足特定条件时使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (count &lt; <span class="hljs-number">5</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count);<br>  count++;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-do…while-循环"><a href="#3-do…while-循环" class="headerlink" title="3. do…while 循环"></a>3. do…while 循环</h3><p><strong>do…while</strong> 循环保证循环体至少执行一次，适合需要<strong>先执行再判断</strong>的场景。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> input;<br><span class="hljs-keyword">do</span> &#123;<br>  input = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请输入yes退出:&quot;</span>);<br>&#125; <span class="hljs-keyword">while</span> (input !== <span class="hljs-string">&quot;yes&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="4-for…in-循环"><a href="#4-for…in-循环" class="headerlink" title="4. for…in 循环"></a>4. for…in 循环</h3><p><strong>for…in</strong> 专门用于遍历对象的可枚举属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>, <span class="hljs-attr">role</span>: <span class="hljs-string">&quot;developer&quot;</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> user) &#123;<br>  <span class="hljs-keyword">if</span> (user.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>: <span class="hljs-subst">$&#123;user[key]&#125;</span>`</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-for…of-循环-ES6"><a href="#5-for…of-循环-ES6" class="headerlink" title="5. for…of 循环 (ES6+)"></a>5. for…of 循环 (ES6+)</h3><p><strong>for…of</strong> 是现代 JavaScript 中遍历可迭代对象（如数组、字符串）的首选方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 遍历数组</span><br><span class="hljs-keyword">const</span> fruits = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> fruit <span class="hljs-keyword">of</span> fruits) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruit);<br>&#125;<br><br><span class="hljs-comment">// 遍历字符串</span><br><span class="hljs-keyword">const</span> text = <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> char <span class="hljs-keyword">of</span> text) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(char);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-forEach-方法"><a href="#6-forEach-方法" class="headerlink" title="6. forEach 方法"></a>6. forEach 方法</h3><p>数组的 <strong>forEach</strong> 方法提供了一种函数式的迭代方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>numbers.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">number, index</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`索引 <span class="hljs-subst">$&#123;index&#125;</span>: 值 <span class="hljs-subst">$&#123;number&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="循环对比与选择指南"><a href="#循环对比与选择指南" class="headerlink" title="循环对比与选择指南"></a>循环对比与选择指南</h2><h3 id="性能考虑"><a href="#性能考虑" class="headerlink" title="性能考虑"></a>性能考虑</h3><ul><li><strong>for</strong> 和 <strong>while</strong> 循环通常性能最优</li><li><strong>forEach</strong> 在某些 JavaScript 引擎中可能有轻微性能开销</li><li><strong>for…of</strong> 比传统的 <strong>for</strong> 循环稍慢，但代码更简洁</li></ul><h3 id="如何选择？一张图帮你决定"><a href="#如何选择？一张图帮你决定" class="headerlink" title="如何选择？一张图帮你决定"></a>如何选择？一张图帮你决定</h3><p><img src="/pictures/js%E5%BE%AA%E7%8E%AF%E9%80%89%E6%8B%A9.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="left">场景</th><th align="left">推荐</th></tr></thead><tbody><tr><td align="left"><strong>遍历数组</strong></td><td align="left"><code>for...of</code> (首选) 或 <code>for</code></td></tr><tr><td align="left"><strong>遍历对象属性</strong></td><td align="left"><code>for...in</code> (记得用 <code>hasOwnProperty</code> 检查)</td></tr><tr><td align="left"><strong>需要高度控制循环次数和过程</strong></td><td align="left"><code>for</code></td></tr><tr><td align="left"><strong>不确定循环次数，但必须先判断条件</strong></td><td align="left"><code>while</code></td></tr><tr><td align="left"><strong>循环体至少必须执行一次</strong></td><td align="left"><code>do...while</code></td></tr><tr><td align="left"><strong>简单遍历数组且不需要中断</strong></td><td align="left"><code>forEach</code></td></tr></tbody></table><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>掌握不同类型的循环是 JavaScript 编程的基础。根据实际需求选择合适的循环方式，能让你的代码更简洁高效。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 高级协作技巧：储藏与变基实战指南</title>
    <link href="/2025/08/28/Git-%E9%AB%98%E7%BA%A7%E5%8D%8F%E4%BD%9C%E6%8A%80%E5%B7%A7%EF%BC%9A%E5%82%A8%E8%97%8F%E4%B8%8E%E5%8F%98%E5%9F%BA%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/"/>
    <url>/2025/08/28/Git-%E9%AB%98%E7%BA%A7%E5%8D%8F%E4%BD%9C%E6%8A%80%E5%B7%A7%EF%BC%9A%E5%82%A8%E8%97%8F%E4%B8%8E%E5%8F%98%E5%9F%BA%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在<a href="https://pumpkynn.github.io/2025/08/27/Git-%E5%9C%BA%E6%99%AF%E5%8C%96%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%EF%BC%9A%E4%BB%8E%E8%8F%9C%E9%B8%9F%E5%88%B0%E9%AB%98%E6%89%8B%E7%9A%84%E5%AE%8C%E6%95%B4%E6%94%BB%E7%95%A5/">Git 场景化实战指南：从菜鸟到高手的完整攻略</a>中，我们学习了 Git 的基础操作和常见工作流程。现在让我们深入探讨两个高级但极其实用的 Git 功能：<strong>储藏(stash)<strong>和</strong>变基(rebase)</strong>。掌握这些技巧将显著提升你的 Git 工作流效率！</p><h2 id="stash-储藏操作"><a href="#stash-储藏操作" class="headerlink" title="stash 储藏操作"></a>stash 储藏操作</h2><h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h3><p>你正在开发一个功能，但突然需要切换到另一个紧急任务。，这时就需要用到 git stash 操作来临时保存当前的工作进度了</p><h3 id="具体操作步骤："><a href="#具体操作步骤：" class="headerlink" title="具体操作步骤："></a>具体操作步骤：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 你要在 feature 分支上开发用户登录功能，首先切换到这个分支</span><br>git checkout feature<br><br><span class="hljs-comment"># 2. 你在login.js文件里面写了对应的登录验证代码</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;// 登录验证代码&quot;</span> &gt;&gt; login.js<br><span class="hljs-comment">#把刚刚写的代码提交到暂存区</span><br>git add login.js<br><span class="hljs-comment"># 注意：还没有 git commit，因为功能没写完</span><br><br><span class="hljs-comment"># 3. 突然接到紧急任务：修复主分支的 bug</span><br><span class="hljs-comment"># 你不能提交，因为功能没写完</span><br><span class="hljs-comment"># 你也不能切换分支，因为有未提交的修改</span><br><br><span class="hljs-comment"># 4. 使用 git stash 临时保存</span><br>git stash  <span class="hljs-comment"># 保存当前工作进度</span><br><br><span class="hljs-comment"># 5. 现在可以切换分支了</span><br>git checkout main<br><br><span class="hljs-comment"># 6. 修复紧急 bug</span><br><span class="hljs-comment"># ... 修复代码 ...</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;hotfix: fix critical bug&quot;</span><br><br><span class="hljs-comment"># 7. 回到功能分支继续开发</span><br>git checkout feature<br>git stash pop  <span class="hljs-comment"># 恢复之前的工作进度</span><br></code></pre></td></tr></table></figure><p><strong>❓ 为什么不能直接切换分支：</strong></p><ul><li><p>Git 不允许在有未提交修改时切换分支</p></li><li><p>这是为了保护你的工作不被丢失</p></li><li><p>git stash 提供了一个安全的临时保存方案</p></li></ul><h2 id="rebase-变基操作"><a href="#rebase-变基操作" class="headerlink" title="rebase 变基操作"></a>rebase 变基操作</h2><h3 id="1-什么是变基（Rebase）？"><a href="#1-什么是变基（Rebase）？" class="headerlink" title="1.什么是变基（Rebase）？"></a><strong>1.什么是变基（Rebase）？</strong></h3><p><strong>变基（Rebase）</strong> 是 Git 中的一个重要操作，它的本质是**「重新基于最新代码来应用你的更改」**。</p><h3 id="2-基本变基操作"><a href="#2-基本变基操作" class="headerlink" title="2.基本变基操作"></a><strong>2.基本变基操作</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout feature  <span class="hljs-comment"># 切换到 feature 分支</span><br>git rebase main       <span class="hljs-comment"># 将当前分支feature变基到 main 分支</span><br></code></pre></td></tr></table></figure><p><strong>实际效果：</strong></p><p><strong>变基前：</strong></p><p>text</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">      <span class="hljs-comment">A</span><span class="hljs-literal">---</span><span class="hljs-comment">B</span><span class="hljs-literal">---</span><span class="hljs-comment">C feature</span><br>     <span class="hljs-comment">/</span><br><span class="hljs-comment">D</span><span class="hljs-literal">---</span><span class="hljs-comment">E</span><span class="hljs-literal">---</span><span class="hljs-comment">F</span><span class="hljs-literal">---</span><span class="hljs-comment">G main</span><br></code></pre></td></tr></table></figure><p><strong>变基后：</strong></p><p>text</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">              <span class="hljs-comment">A&#x27;</span><span class="hljs-literal">--</span><span class="hljs-comment">B&#x27;</span><span class="hljs-literal">--</span><span class="hljs-comment">C&#x27; feature</span><br>             <span class="hljs-comment">/</span><br><span class="hljs-comment">D</span><span class="hljs-literal">---</span><span class="hljs-comment">E</span><span class="hljs-literal">---</span><span class="hljs-comment">F</span><span class="hljs-literal">---</span><span class="hljs-comment">G main</span><br></code></pre></td></tr></table></figure><h3 id="3-git-rebase-main-详解"><a href="#3-git-rebase-main-详解" class="headerlink" title="3.git rebase main  详解"></a><strong>3.<code>git rebase main </code> 详解</strong></h3><ul><li><strong>将当前分支（feature）的提交”重新应用”到 <code>main</code> 分支的最新提交 G 之上</strong></li><li>这个过程会：<ul><li>找到两个分支的共同祖先<strong>E</strong></li><li>提取当前分支<strong>feature</strong>的所有新提交<strong>A,B,C</strong></li><li>将这些提交<strong>F 和 G</strong>逐个应用到 <code>main</code> 分支的顶端</li><li>创建新的提交<strong>A’,B’,C’</strong></li></ul></li></ul><p>**注意：**变基操作是在代码提交后，是你已经把 A,B,C 执行了 commit 后的操作，它的作用是整理、修改和优化提交历史，使其更加清晰和有条理。</p><p>变基前的提交<strong>A,B,C</strong>和变基后的提交**A’,B’,C’**内容相同但用来标识每次提交的哈希值不同</p><h3 id="4-rebase-的使用场景："><a href="#4-rebase-的使用场景：" class="headerlink" title="4.rebase 的使用场景："></a><strong>4.rebase 的使用场景：</strong></h3><h4 id="场景-1：你的分支落后了，需要同步最新代码"><a href="#场景-1：你的分支落后了，需要同步最新代码" class="headerlink" title="场景 1：你的分支落后了，需要同步最新代码"></a><strong>场景 1：你的分支落后了，需要同步最新代码</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 情况：你一周前从主分支创建了功能分支</span><br> <span class="hljs-comment"># A---B---C feature</span><br> <span class="hljs-comment">#         /</span><br> <span class="hljs-comment">#  D---E---F---G main</span><br><span class="hljs-comment"># 现在主分支有了很多新更新，你的分支落后了</span><br><br>git <span class="hljs-built_in">log</span> --oneline --graph<br><span class="hljs-comment">#log：显示提交历史</span><br><span class="hljs-comment">#--oneline：每个提交只显示一行（缩短的哈希值 + 提交信息）</span><br><span class="hljs-comment">#--graph：用 ASCII 图形显示分支和合并历史</span><br></code></pre></td></tr></table></figure><p><strong>显示出的提交历史示例：</strong></p><p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/bb3ab38a6248409d8079a9c54d28a752~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pep552h5pep6LW35aS05Y-R5aSa:q75.awebp?rk3s=f64ab15b&x-expires=1757610053&x-signature=941wenpOuA2y7P9BGhOAw7nVguw="></p><p><strong>解读这个图形：</strong></p><ol><li><strong><code>\*</code></strong> 表示一个提交</li><li><strong><code>|</code></strong> 和 <strong><code>/</code></strong> 表示分支的分叉和合并关系</li><li><strong><code>(HEAD -&gt; feature)</code></strong> 表示当前在 feature 分支</li><li><strong><code>(main)</code></strong> 表示 main 分支的位置</li></ol><p><strong>执行变基操作</strong><code>git rebase main</code>，这个命令的意思是：<strong>“将 当前 feature 分支的提交重新应用到 main 分支的最新状态之上”</strong></p><p><strong>变基后的结果</strong></p><p><img src="https://p9-xtjj-sign.byteimg.com/tos-cn-i-73owjymdk6/cf4d18173ab7485dae1035de4e5f333c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5pep552h5pep6LW35aS05Y-R5aSa:q75.awebp?rk3s=f64ab15b&x-expires=1757610053&x-signature=WKKZUkWuAuuv0IK5E9RAxV3oZLw="></p><p><strong>现在的状态：</strong></p><ol><li><strong>变成了线性历史</strong>：没有分支分叉了</li><li><strong>feature 分支现在基于最新的 main</strong>：<ul><li>原来的提交 def5678 和 abc1234 被重新应用</li><li>它们现在位于 main 分支的所有更新之后</li></ul></li><li><strong>提交顺序</strong>（从新到旧）：<ul><li>abc1234 (feature 的最新功能)</li><li>def5678 (feature 的较旧功能)</li><li>xyz9999 (main 的最新更新)</li><li>uvw8888 (main 的另一个更新)</li><li>rst7777 (main 的第三个更新)</li><li>mno7890 (一周前的共同基础)</li></ul></li></ol><h4 id="场景-2：你的提交历史太乱了，想整理一下"><a href="#场景-2：你的提交历史太乱了，想整理一下" class="headerlink" title="场景 2：你的提交历史太乱了，想整理一下"></a><strong>场景 2：你的提交历史太乱了，想整理一下</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 情况：你开发了一个功能，但提交了很多次，历史很乱</span><br><br><span class="hljs-comment"># 1. 查看最近的6个提交，一行显示一个</span><br>git <span class="hljs-built_in">log</span> --oneline -6<br><span class="hljs-comment"># abc1234 修复按钮样式</span><br><span class="hljs-comment"># def5678 添加错误处理</span><br><span class="hljs-comment"># ghi9012 修复bug</span><br><span class="hljs-comment"># jkl3456 添加注释</span><br><span class="hljs-comment"># mno7890 优化性能</span><br><span class="hljs-comment"># pqr1234 实现登录功能</span><br></code></pre></td></tr></table></figure><p><strong>操作：<strong>这时你输入<code>git rebase -i HEAD~6</code> ，表示你要交互式(</strong>*i</strong>nteractive*)地对当前（HEAD 所指向）的分支的这六个提交做变基操作，这时<strong>Git 会打开文本编辑器</strong>（如 Vim、VSCode、Nano 等），<strong>显示类似这样的内容：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pick</span> pqr1234 提交信息<span class="hljs-number">5</span><br><span class="hljs-attribute">pick</span> mno7890 提交信息<span class="hljs-number">4</span><br><span class="hljs-attribute">pick</span> jkl3456 提交信息<span class="hljs-number">3</span><br><span class="hljs-attribute">pick</span> ghi9012 提交信息<span class="hljs-number">2</span><br><span class="hljs-attribute">pick</span> def5678 提交信息<span class="hljs-number">1</span><br><span class="hljs-attribute">pick</span> abc1234 提交信息<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>你可以修改每行前的命令：</strong></p><ul><li><code>pick</code> → 保留这个提交</li><li><code>reword</code> → 修改提交信息</li><li><code>edit</code> → 暂停并修改提交内容</li><li><code>squash</code> → 合并到前一个提交</li><li><code>fixup</code> → 合并但丢弃信息</li><li><code>drop</code> → 删除这个提交</li></ul><p><strong>保存退出后</strong>，Git 会按照你的指示重新组织提交历史</p><p><strong>💡 实用技巧</strong></p><p><strong>如果想操作所有提交：</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 从第一个提交开始操作所有历史</span><br>git rebase -i <span class="hljs-comment">--root</span><br></code></pre></td></tr></table></figure><p><strong>如果想操作特定数量的提交：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 操作最近3个提交</span><br><span class="hljs-attribute">git</span> rebase -i HEAD~<span class="hljs-number">3</span><br><br><span class="hljs-comment"># 操作最近10个提交</span><br><span class="hljs-attribute">git</span> rebase -i HEAD~<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p><strong>如果想操作到某个特定提交：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 操作直到提交abc1234（不包括abc1234）</span><br>git rebase -i abc1234^<br><span class="hljs-comment"># abc1234^ 表示 abc1234 的父提交</span><br><span class="hljs-comment">#相当于 abc1234 的前一个提交</span><br></code></pre></td></tr></table></figure><p><strong>⚠️ 重要提醒</strong></p><p><strong>只对尚未推送到远程仓库的本地提交使用交互式变基！</strong><br>因为变基会重写提交历史，如果已经推送了，会给协作者带来麻烦。</p><table><thead><tr><th align="left">特性</th><th align="left"><strong>普通变基 (<code>git rebase</code>)</strong></th><th align="left"><strong>交互式变基 (<code>git rebase -i</code>)</strong></th></tr></thead><tbody><tr><td align="left"><strong>操作方式</strong></td><td align="left">自动完成</td><td align="left">手动交互选择</td></tr><tr><td align="left"><strong>修改历史</strong></td><td align="left">通常不修改提交内容</td><td align="left">可以修改提交内容和信息</td></tr><tr><td align="left"><strong>使用场景</strong></td><td align="left">同步代码、整理分支</td><td align="left">精细修改提交历史</td></tr><tr><td align="left"><strong>风险等级</strong></td><td align="left">中等</td><td align="left">高</td></tr></tbody></table><h4 id="场景-3：你想修改某个提交的信息"><a href="#场景-3：你想修改某个提交的信息" class="headerlink" title="场景 3：你想修改某个提交的信息"></a><strong>场景 3：你想修改某个提交的信息</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 情况：你发现某个提交的信息写错了</span><br><br><span class="hljs-comment"># 1. 查看提交</span><br>git <span class="hljs-built_in">log</span> --oneline -3<br><span class="hljs-comment"># abc1234 修复登录bug</span><br><span class="hljs-comment"># def5678 添加用户注册</span><br><span class="hljs-comment"># ghi9012 初始化项目</span><br><br><span class="hljs-comment"># 2. 交互式 rebase</span><br>git rebase -i HEAD~3<br><br><span class="hljs-comment"># 3. 编辑器打开,按照时间顺序从上到下显示（和git log顺序不一样）</span><br><span class="hljs-comment"># pick ghi9012 初始化项目</span><br><span class="hljs-comment"># pick def5678 添加用户注册</span><br><span class="hljs-comment"># pick abc1234 修复登录bug</span><br><br><span class="hljs-comment"># 4. 你想修改第二个提交的提交信息，你就要把第二条提交记录前面的单词pick(保留这个提交)改成reword（修改提交信息），也就是你要这么写：</span><br><br><span class="hljs-comment"># pick ghi9012 初始化项目</span><br><span class="hljs-comment"># reword def5678 添加用户注册</span><br><span class="hljs-comment"># pick abc1234 修复登录bug</span><br><br><span class="hljs-comment"># 5. 保存后，Git 会让你重新编辑第二个提交的信息</span><br><span class="hljs-comment"># 你改为：&quot;实现用户注册功能&quot;</span><br><br><span class="hljs-comment"># 6. 结果：</span><br>git <span class="hljs-built_in">log</span> --oneline -3<br><span class="hljs-comment"># abc1234 修复登录bug</span><br><span class="hljs-comment"># def5678 实现用户注册功能</span><br><span class="hljs-comment"># ghi9012 初始化项目</span><br></code></pre></td></tr></table></figure><h4 id="场景-4：你想删除某个提交"><a href="#场景-4：你想删除某个提交" class="headerlink" title="场景 4：你想删除某个提交"></a><strong>场景 4：你想删除某个提交</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 情况：你提交了一个测试文件，现在想删除这个提交</span><br><br><span class="hljs-comment"># 1. 查看提交</span><br>git <span class="hljs-built_in">log</span> --oneline -4<br><span class="hljs-comment"># abc1234 添加测试文件</span><br><span class="hljs-comment"># def5678 实现核心功能</span><br><span class="hljs-comment"># ghi9012 添加配置文件</span><br><span class="hljs-comment"># jkl3456 初始化项目</span><br><br><span class="hljs-comment"># 2. 交互式 rebase</span><br>git rebase -i HEAD~4<br><br><span class="hljs-comment"># 3. 编辑器打开：</span><br><span class="hljs-comment"># pick jkl3456 初始化项目</span><br><span class="hljs-comment"># pick ghi9012 添加配置文件</span><br><span class="hljs-comment"># pick def5678 实现核心功能</span><br><span class="hljs-comment"># pick abc1234 添加测试文件</span><br><br><span class="hljs-comment"># 4. 你想删除最后一个提交，改为：</span><br><span class="hljs-comment"># pick jkl3456 初始化项目</span><br><span class="hljs-comment"># pick ghi9012 添加配置文件</span><br><span class="hljs-comment"># pick def5678 实现核心功能</span><br><span class="hljs-comment"># drop abc1234 添加测试文件</span><br><br><span class="hljs-comment"># 5. 结果：测试文件的提交被删除了</span><br>git <span class="hljs-built_in">log</span> --oneline -3<br><span class="hljs-comment"># def5678 实现核心功能</span><br><span class="hljs-comment"># ghi9012 添加配置文件</span><br><span class="hljs-comment"># jkl3456 初始化项目</span><br></code></pre></td></tr></table></figure><h4 id="为什么需要-Rebase？"><a href="#为什么需要-Rebase？" class="headerlink" title="为什么需要 Rebase？"></a><strong>为什么需要 Rebase？</strong></h4><p><strong>问题：提交历史太乱</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 没有 rebase 的历史（看起来像这样）：</span><br>* abc1234 修复小bug         ← 琐碎的提交<br>* def5678 添加注释          ← 琐碎的提交<br>* ghi9012 修复另一个bug      ← 琐碎的提交<br>* jkl3456 优化代码          ← 琐碎的提交<br>* mno7890 实现功能          ← 主要的提交<br></code></pre></td></tr></table></figure><p><strong>问题在于：</strong></p><ul><li>5 个提交其实都是为了完成<strong>同一个功能</strong></li><li>包含了很多琐碎的中间步骤</li><li>历史记录冗长且难以阅读</li><li>代码审查时需要看很多小提交</li></ul><p><strong>整理后的清晰历史</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 使用 rebase 整理后：</span><br><span class="hljs-bullet">*</span> mno7890 实现完整功能       ← 一个清晰的提交<br></code></pre></td></tr></table></figure><p><strong>好处：</strong></p><ul><li>一个提交代表一个完整的功能</li><li>历史简洁明了</li><li>更容易理解代码变更</li><li>便于代码审查和问题排查</li></ul><h2 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h2><p>Rebase 整理历史就像是：</p><ul><li><strong>从”过程记录”到”成果展示”</strong></li><li><strong>从”零散零件”到”完整产品”</strong></li><li><strong>从”草稿笔记”到”正式文档”</strong></li></ul><p>让提交历史更有意义，而不仅仅是记录每一个微小的更改！</p>]]></content>
    
    
    <categories>
      
      <category>版本协作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 场景化实战指南：从菜鸟到高手的完整攻略</title>
    <link href="/2025/08/27/Git-%E5%9C%BA%E6%99%AF%E5%8C%96%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%EF%BC%9A%E4%BB%8E%E8%8F%9C%E9%B8%9F%E5%88%B0%E9%AB%98%E6%89%8B%E7%9A%84%E5%AE%8C%E6%95%B4%E6%94%BB%E7%95%A5/"/>
    <url>/2025/08/27/Git-%E5%9C%BA%E6%99%AF%E5%8C%96%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97%EF%BC%9A%E4%BB%8E%E8%8F%9C%E9%B8%9F%E5%88%B0%E9%AB%98%E6%89%8B%E7%9A%84%E5%AE%8C%E6%95%B4%E6%94%BB%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="引言-🎉"><a href="#引言-🎉" class="headerlink" title="引言 🎉"></a>引言 🎉</h2><p>还在为 Git 的各种概念头疼吗？🤔<code>commit</code>、<code>branch</code>、<code>merge</code>、<code>rebase</code>… 这些术语听起来就让人头大。市面上很多 Git 教程确实让人望而却步，充斥着大量理论概念，让新手无从下手。</p><p><strong>但 Git 真的有那么难吗？</strong></p><p>其实不然！Git 就像是一个超级强大的”时光机”，帮你记录代码的每一次变化。想象一下，如果你写代码的时候也能像玩游戏一样随时存档，那该多爽！✨</p><p>本文采用<strong>场景化教学</strong>，不讲那些枯燥的理论，而是通过<strong>真实的开发场景</strong>，让你在实际操作中学会 Git。看完这篇文章，你就能：</p><p>✅ 独立管理自己的项目<br>✅ 参与开源项目贡献代码<br>✅ 在团队中高效协作<br>✅ 解决各种 Git 问题</p><p>准备好了吗？让我们开始这场 Git 实战之旅！</p><h2 id="🏄‍♂️-场景一：个人独立项目开发"><a href="#🏄‍♂️-场景一：个人独立项目开发" class="headerlink" title="🏄‍♂️ 场景一：个人独立项目开发"></a>🏄‍♂️ 场景一：个人独立项目开发</h2><h3 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h3><p>你刚刚开始学习编程，想要创建一个个人项目来练习。你需要一个简单的方式来管理你的代码版本，记录每一次的进步。</p><h3 id="具体操作步骤"><a href="#具体操作步骤" class="headerlink" title="具体操作步骤"></a>具体操作步骤</h3><p><strong>第一步：项目初始化</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建项目目录并初始化 Git</span><br><span class="hljs-built_in">mkdir</span> my-project<br><span class="hljs-built_in">cd</span> my-project<br>git init<br><br><span class="hljs-comment"># 配置用户信息（首次使用需要）</span><br>git config --global user.name <span class="hljs-string">&quot;你的名字&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;你的邮箱&quot;</span><br><br><span class="hljs-comment"># 创建文件并提交</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;# My Project&quot;</span> &gt; README.md<br>git add README.md<br>git commit -m <span class="hljs-string">&quot;Initial commit: add README&quot;</span><br></code></pre></td></tr></table></figure><p><strong>第二步：日常开发流程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前状态</span><br>git status<br><br><span class="hljs-comment"># 添加修改到暂存区</span><br>git add &lt;文件名&gt;  <span class="hljs-comment"># 添加特定文件</span><br>git add .        <span class="hljs-comment"># 添加所有修改</span><br><br><span class="hljs-comment"># 提交更改</span><br>git commit -m <span class="hljs-string">&quot;描述性的提交信息&quot;</span><br><br><span class="hljs-comment"># 查看提交历史</span><br>git <span class="hljs-built_in">log</span><br>git <span class="hljs-built_in">log</span> --oneline --graph  <span class="hljs-comment"># 简洁版可视化历史</span><br></code></pre></td></tr></table></figure><p><strong>第三步：个人项目分支使用场景</strong></p><p><strong>场景 A：不用分支（推荐新手）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 直接在主分支上开发</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;feat: add new feature&quot;</span><br>git push origin main<br></code></pre></td></tr></table></figure><p><strong>适用情况：</strong></p><ul><li>学习阶段，专注于基本 Git 操作</li><li>项目简单，功能单一</li><li>快速迭代，不需要复杂管理</li></ul><p><strong>场景 B：使用分支（推荐进阶）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建功能分支，&quot;feature/是分支的命名前缀，不是必需的&quot;</span><br>git checkout -b feature/user-login<br><br><span class="hljs-comment"># 2. 在分支上开发</span><br><span class="hljs-comment"># ... 编写代码 ...</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;feat: implement user login&quot;</span><br><br><span class="hljs-comment"># 3. 合并回主分支</span><br>git checkout main<br>git merge feature/user-login<br><br><span class="hljs-comment"># 4. 删除功能分支</span><br>git branch -d feature/user-login<br><br><span class="hljs-comment"># 5. 推送到远程</span><br>git push origin main<br></code></pre></td></tr></table></figure><p><strong>适用情况：</strong></p><ul><li>尝试新功能，不想影响主分支稳定性</li><li>同时开发多个功能</li><li>需要版本管理（如稳定版、开发版）</li></ul><p><strong>分支使用建议：</strong></p><ul><li><strong>新手</strong>：先用主分支掌握基本操作</li><li><strong>进阶</strong>：学习分支管理，提高开发效率</li><li><strong>复杂项目</strong>：必须使用分支来管理不同功能</li></ul><h2 id="👥-场景二：参与开源项目"><a href="#👥-场景二：参与开源项目" class="headerlink" title="👥 场景二：参与开源项目"></a>👥 场景二：参与开源项目</h2><h3 id="场景描述-1"><a href="#场景描述-1" class="headerlink" title="场景描述"></a>场景描述</h3><p>你在 GitHub 上发现了一个很棒的开源项目，想要贡献代码。但是你没有直接修改原项目的权限，需要通过 Fork + Pull Request 的方式。</p><h3 id="具体操作步骤-1"><a href="#具体操作步骤-1" class="headerlink" title="具体操作步骤"></a>具体操作步骤</h3><p><strong>第一步：Fork 项目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 在 GitHub/GitLab 上点击 Fork 按钮</span><br><span class="hljs-comment"># 2. 克隆你 Fork 的仓库到本地</span><br>git <span class="hljs-built_in">clone</span> https://github.com/your-username/original-repo.git<br><span class="hljs-built_in">cd</span> original-repo<br><br><span class="hljs-comment"># 3. 告诉你的本地 Git 仓库&quot;还有一个远程仓库叫 upstream&quot;- 这样你就可以获取原项目的更新</span><br>git remote add upstream https://github.com/original-owner/original-repo.git<br><br><span class="hljs-comment"># 4. 验证远程仓库 - 查看所有远程仓库，确认添加成功</span><br>git remote -v<br><span class="hljs-comment"># 应该看到 origin（你的fork）和 upstream（原仓库）</span><br></code></pre></td></tr></table></figure><p><strong>第二步：开发新功能</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 确保本地代码是最新的</span><br>git fetch upstream  <span class="hljs-comment"># 从上游仓库获取最新的提交信息（不合并）</span><br>git checkout main   <span class="hljs-comment"># 切换到主分支</span><br>git merge upstream/main  <span class="hljs-comment"># 将上游主分支的更新合并到你的本地主分支</span><br><br><span class="hljs-comment"># 2. 创建功能分支</span><br>git checkout -b feature/new-feature  <span class="hljs-comment"># 创建并切换到新的功能分支</span><br><br><span class="hljs-comment"># 3. 开发你的功能</span><br><span class="hljs-comment"># ... 编写代码 ...</span><br><br><span class="hljs-comment"># 4. 提交代码</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;feat: add new feature&quot;</span><br><br><span class="hljs-comment"># 5. 推送到你的 Fork</span><br>git push origin feature/new-feature  <span class="hljs-comment"># 将你的功能分支推送到你的 Fork 仓库</span><br></code></pre></td></tr></table></figure><p><strong>第三步：创建 Pull Request</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 在 GitHub/GitLab 上创建 Pull Request</span><br><span class="hljs-comment"># 2. 填写详细的描述，说明你的改动</span><br><span class="hljs-comment"># 3. 等待维护者审查</span><br><span class="hljs-comment"># 4. 根据反馈修改代码（如果需要）</span><br><br><span class="hljs-comment"># 如果需要修改，继续在同一个分支上提交</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;fix: address review comments&quot;</span><br>git push origin feature/new-feature<br><span class="hljs-comment"># PR 会自动更新</span><br></code></pre></td></tr></table></figure><p><strong>第四步：保持 Fork 同步</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 定期同步原仓库的更新</span><br>git fetch upstream  <span class="hljs-comment"># 获取上游仓库的最新更新</span><br>git checkout main   <span class="hljs-comment"># 切换到你的主分支</span><br>git merge upstream/main  <span class="hljs-comment"># 将上游的更新合并到你的主分支</span><br>git push origin main     <span class="hljs-comment"># 将更新推送到你的 Fork 仓库，保持同步</span><br></code></pre></td></tr></table></figure><p><strong>为什么要这样做？</strong></p><ol><li><strong>Fork</strong>：因为你没有原仓库的写入权限，需要先复制一份到自己的账户</li><li><strong>添加上游仓库</strong>：这样你可以随时获取原项目的更新，避免你的 Fork 过时</li><li><strong>功能分支</strong>：在独立分支上开发，不影响主分支的稳定性</li><li><strong>Pull Request</strong>：通过这种方式让原项目维护者审查你的代码，决定是否接受你的贡献</li></ol><h2 id="📋-场景三：团队协作开发"><a href="#📋-场景三：团队协作开发" class="headerlink" title="📋 场景三：团队协作开发"></a>📋 场景三：团队协作开发</h2><h3 id="场景描述-2"><a href="#场景描述-2" class="headerlink" title="场景描述"></a>场景描述</h3><p>你加入了一个开发团队，需要和其他开发者一起协作开发项目。你有直接向仓库推送代码的权限，但需要通过 Pull Request 进行代码审查。</p><h3 id="具体操作步骤-2"><a href="#具体操作步骤-2" class="headerlink" title="具体操作步骤"></a>具体操作步骤</h3><p><strong>第一步：克隆团队仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 直接克隆团队仓库（不需要 Fork）</span><br>git <span class="hljs-built_in">clone</span> https://github.com/company/project.git<br><span class="hljs-built_in">cd</span> project<br><br><span class="hljs-comment"># 查看分支策略</span><br>git branch -a<br></code></pre></td></tr></table></figure><p><strong>第二步：团队开发流程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 拉取最新代码</span><br>git pull origin main<br><br><span class="hljs-comment"># 2. 创建功能分支</span><br>git checkout -b feature/user-login<br><br><span class="hljs-comment"># 3. 开发功能</span><br><span class="hljs-comment"># ... 编写代码 ...</span><br><br><span class="hljs-comment"># 4. 提交代码</span><br>git add .<br>git commit -m <span class="hljs-string">&quot;feat: implement user login functionality&quot;</span><br><br><span class="hljs-comment"># 5. 推送到远程分支</span><br>git push origin feature/user-login<br><br><span class="hljs-comment"># 6. 创建 Pull Request/Merge Request</span><br><span class="hljs-comment"># 在 GitHub/GitLab 上创建 PR，等待团队成员审查</span><br></code></pre></td></tr></table></figure><p><strong>第三步：团队协作的最佳实践</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 经常同步主分支</span><br>git checkout main<br>git pull origin main<br><br><span class="hljs-comment"># 2. 在功能分支上开发</span><br>git checkout -b feature/new-feature<br><br><span class="hljs-comment"># 3. 小步提交，便于审查</span><br>git commit -m <span class="hljs-string">&quot;feat: add user authentication&quot;</span><br>git commit -m <span class="hljs-string">&quot;test: add login tests&quot;</span><br>git commit -m <span class="hljs-string">&quot;docs: update API documentation&quot;</span><br><br><span class="hljs-comment"># 4. 推送并创建 PR</span><br>git push origin feature/new-feature<br></code></pre></td></tr></table></figure><h2 id="⚡-场景四：处理代码冲突"><a href="#⚡-场景四：处理代码冲突" class="headerlink" title="⚡ 场景四：处理代码冲突"></a>⚡ 场景四：处理代码冲突</h2><h3 id="场景描述-3"><a href="#场景描述-3" class="headerlink" title="场景描述"></a>场景描述</h3><p>你和同事同时修改了同一个文件，当你尝试合并代码时，Git 提示有冲突。你需要手动解决这些冲突。</p><h3 id="具体操作步骤-3"><a href="#具体操作步骤-3" class="headerlink" title="具体操作步骤"></a>具体操作步骤</h3><p><strong>第一步：发现冲突</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取最新代码时发现冲突</span><br>git pull origin main<br><br><span class="hljs-comment"># 查看冲突文件</span><br>git status<br></code></pre></td></tr></table></figure><p><strong>第二步：解决冲突</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 手动编辑冲突文件，解决冲突标记</span><br><span class="hljs-comment"># 冲突标记格式：</span><br><span class="hljs-comment"># &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="hljs-comment"># 你的代码</span><br><span class="hljs-comment"># =======</span><br><span class="hljs-comment"># 同事的代码</span><br><span class="hljs-comment"># &gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-name</span><br><br><span class="hljs-comment"># 解决冲突后标记为已解决</span><br>git add &lt;解决后的文件&gt;<br><br><span class="hljs-comment"># 完成合并</span><br>git commit<br></code></pre></td></tr></table></figure><p><strong>第三步：使用差异工具</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看差异</span><br>git diff                 <span class="hljs-comment"># 工作区与暂存区的差异</span><br>git diff --staged        <span class="hljs-comment"># 暂存区与最新提交的差异</span><br>git diff branch1 branch2 <span class="hljs-comment"># 两个分支间的差异</span><br></code></pre></td></tr></table></figure><h2 id="🔄-场景五：版本管理与回退"><a href="#🔄-场景五：版本管理与回退" class="headerlink" title="🔄 场景五：版本管理与回退"></a>🔄 场景五：版本管理与回退</h2><h3 id="场景描述-4"><a href="#场景描述-4" class="headerlink" title="场景描述"></a>场景描述</h3><p>你发现最近的代码修改有问题，需要回到之前的某个版本。或者你想要查看某个特定版本的代码。</p><h3 id="具体操作步骤-4"><a href="#具体操作步骤-4" class="headerlink" title="具体操作步骤"></a>具体操作步骤</h3><p><strong>第一步：查看历史版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看详细提交历史</span><br>git <span class="hljs-built_in">log</span> --oneline -n 10  <span class="hljs-comment"># 最近10条提交</span><br><br><span class="hljs-comment"># 回退到特定版本</span><br><span class="hljs-comment">#  commit-hash是Git 为每次提交生成的唯一标识符，</span><br><span class="hljs-comment">#通常是一串字母和数字的组合，如：a1b2c3d4e5f6</span><br><span class="hljs-comment">#可以通过 git log 命令查看</span><br>git checkout &lt;commit-hash&gt;   <span class="hljs-comment"># 临时查看旧版本，切换到指定的提交，但不会修改当前分支</span><br>git reset --hard &lt;commit-hash&gt;  <span class="hljs-comment"># 彻底回退，将当前分支重置到指定的提交(谨慎使用)</span><br><br><span class="hljs-comment"># 创建标签（用于版本发布）</span><br>git tag v1.0.0<br>git push origin --tags<br></code></pre></td></tr></table></figure><p><strong>第二步：撤销更改</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 场景：你修改了文件但还没有 git add</span><br>git checkout -- app.js  <span class="hljs-comment"># 撤销 app.js 的修改，回到最后一次提交的状态</span><br><br><span class="hljs-comment"># 场景：你已经 git add 了文件，但还没有 git commit</span><br>git reset HEAD app.js  <span class="hljs-comment"># 将 app.js 从暂存区移除，但保留工作区的修改</span><br><br><span class="hljs-comment"># 场景：你刚提交了代码，但想修改提交信息或添加遗漏的文件</span><br>git add forgotten-file.js  <span class="hljs-comment"># 添加遗漏的文件</span><br>git commit --amend  <span class="hljs-comment"># 修改最后一次提交</span><br></code></pre></td></tr></table></figure><h2 id="📝-场景六：Git-提交规范"><a href="#📝-场景六：Git-提交规范" class="headerlink" title="📝 场景六：Git 提交规范"></a>📝 场景六：Git 提交规范</h2><h3 id="场景描述-5"><a href="#场景描述-5" class="headerlink" title="场景描述"></a>场景描述</h3><p>你的团队越来越大，提交信息越来越混乱。你需要一个统一的提交规范来提高代码管理的效率。</p><h3 id="提交信息格式"><a href="#提交信息格式" class="headerlink" title="提交信息格式"></a>提交信息格式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>): <span class="hljs-tag">&lt;<span class="hljs-name">subject</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Type（类型）：</strong></p><ul><li><code>feat</code>: 新功能</li><li><code>fix</code>: 修复 bug</li><li><code>docs</code>: 文档更新</li><li><code>style</code>: 代码格式调整（不影响功能）</li><li><code>refactor</code>: 代码重构</li><li><code>test</code>: 测试相关</li><li><code>chore</code>: 构建过程或辅助工具的变动</li></ul><p><strong>实际应用示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 简单版本（适合小团队）</span><br>git commit -m <span class="hljs-string">&quot;feat: 添加用户注册功能&quot;</span><br>git commit -m <span class="hljs-string">&quot;fix: 修复登录页面样式问题&quot;</span><br>git commit -m <span class="hljs-string">&quot;docs: 更新API文档&quot;</span><br><br><span class="hljs-comment"># 详细版本（适合大项目）</span><br>git commit -m <span class="hljs-string">&quot;feat(auth): implement OAuth2 authentication</span><br><span class="hljs-string"></span><br><span class="hljs-string">- Add Google OAuth2 provider</span><br><span class="hljs-string">- Implement JWT token generation</span><br><span class="hljs-string">- Add user session management</span><br><span class="hljs-string">- Update login UI to support OAuth</span><br><span class="hljs-string"></span><br><span class="hljs-string">BREAKING CHANGE: login API response format changed</span><br><span class="hljs-string">Closes #456&quot;</span><br></code></pre></td></tr></table></figure><h2 id="❓-场景七：常见问题排查"><a href="#❓-场景七：常见问题排查" class="headerlink" title="❓ 场景七：常见问题排查"></a>❓ 场景七：常见问题排查</h2><h3 id="场景描述-6"><a href="#场景描述-6" class="headerlink" title="场景描述"></a>场景描述</h3><p>你遇到了一些 Git 问题，需要快速定位和解决。</p><h3 id="具体操作步骤-5"><a href="#具体操作步骤-5" class="headerlink" title="具体操作步骤"></a>具体操作步骤</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看操作记录</span><br>git reflog<br><br><span class="hljs-comment"># 检查仓库完整性</span><br>git fsck<br><br><span class="hljs-comment"># 清理无效文件</span><br>git gc<br></code></pre></td></tr></table></figure><h2 id="🎯-最重要的使用习惯"><a href="#🎯-最重要的使用习惯" class="headerlink" title="🎯 最重要的使用习惯"></a>🎯 最重要的使用习惯</h2><ol><li><strong>提交信息规范</strong>：使用清晰、描述性的提交信息</li><li><strong>频繁提交</strong>：小步快跑，每次提交只完成一个明确的任务</li><li><strong>分支管理</strong>：为每个新功能或修复创建独立分支</li><li><strong>定期同步</strong>：经常从主分支拉取更新，减少冲突可能性</li><li><strong>代码审查</strong>：使用 Pull Request 进行代码审查后再合并</li></ol><h2 id="💪-开始实践吧！"><a href="#💪-开始实践吧！" class="headerlink" title="💪 开始实践吧！"></a>💪 开始实践吧！</h2><p>通过这 7 个真实场景的学习，你已经掌握了 Git 的核心技能。记住，Git 是一个需要不断练习的工具，最好的学习方式就是在实际项目中应用这些技巧。现在就去创建你的第一个 Git 仓库吧！</p>]]></content>
    
    
    <categories>
      
      <category>版本协作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一文读懂URL（统一资源定位符）</title>
    <link href="/2025/08/26/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82URL%EF%BC%88%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6%EF%BC%89/"/>
    <url>/2025/08/26/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82URL%EF%BC%88%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="一文读懂-URL（统一资源定位符）"><a href="#一文读懂-URL（统一资源定位符）" class="headerlink" title="一文读懂 URL（统一资源定位符）"></a>一文读懂 URL（统一资源定位符）</h3><h3 id="什么是-URL"><a href="#什么是-URL" class="headerlink" title="什么是 URL"></a>什么是 URL</h3><ul><li>URL（Uniform Resource Locator）是互联网上定位资源的地址。</li><li>它告诉浏览器：用什么方式（scheme），到哪台主机（host:port），取哪个资源（path），并附带哪些参数（query），定位到资源内部哪一处（fragment）。</li></ul><h3 id="URL-基本结构"><a href="#URL-基本结构" class="headerlink" title="URL 基本结构"></a>URL 基本结构</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">scheme:</span>//host:port/path?query<span class="hljs-meta">#fragment</span><br></code></pre></td></tr></table></figure><ul><li>scheme：协议类型，决定访问规则与默认端口</li><li>host：主机（域名或 IP）</li><li>port：端口号；省略则用协议默认端口（HTTP 80 &#x2F; HTTPS 443）</li><li>path：服务器上资源路径</li><li>query：查询参数（键值对）</li><li>fragment：页面内部位置或前端状态（锚点），仅客户端使用</li></ul><p>示例：</p><ul><li><a href="https://www.example.com:8443/docs/index.html?q=url#section-2">https://www.example.com:8443/docs/index.html?q=url#section-2</a></li></ul><h3 id="常见-Scheme"><a href="#常见-Scheme" class="headerlink" title="常见 Scheme"></a>常见 Scheme</h3><table><thead><tr><th>Scheme</th><th>访问</th><th>用于…</th></tr></thead><tbody><tr><td>http</td><td>超文本传输协议</td><td>以 <code>http://</code> 开头的普通网页。不加密。</td></tr><tr><td>https</td><td>安全超文本传输协议</td><td>安全网页，加密所有信息交换。</td></tr><tr><td>ftp</td><td>文件传输协议</td><td>用于将文件下载或上传至网站。</td></tr><tr><td>file</td><td></td><td>您计算机上的文件。</td></tr></tbody></table><p>说明：<code>file://</code> 是本地文件 URL，浏览器直接从磁盘读取，不经过服务器。</p><h3 id="端口号与协议"><a href="#端口号与协议" class="headerlink" title="端口号与协议"></a>端口号与协议</h3><ul><li>端口的作用：在一台主机上区分不同服务；连接目标是“主机:端口”。</li><li>默认端口：<code>http → 80</code>，<code>https → 443</code>。省略端口时按默认值连接。</li><li>非默认端口必须显式写出：<code>http://example.com:8080/</code>、<code>https://example.com:8443/</code>。</li><li>服务器会在某端口“监听”，并用对应协议处理该端口的请求。</li></ul><h3 id="path、query、fragment-的分工"><a href="#path、query、fragment-的分工" class="headerlink" title="path、query、fragment 的分工"></a>path、query、fragment 的分工</h3><ul><li>path（资源定位）：指明“哪个资源”。改变 path 会请求不同资源。</li><li>query（参数传递）：<code>?key=value&amp;k2=v2</code>，随请求发送给服务器，用于搜索、筛选、分页等。</li><li>fragment（页面片段&#x2F;状态）：<code>#id-or-state</code>，不发送给服务器，仅客户端使用：<ul><li>静态页：滚动到对应 <code>id</code> 元素</li><li>单页应用（SPA）：作为前端路由&#x2F;状态，不刷新页面</li></ul></li><li>为什么需要 fragment 而不仅仅是 path：<ul><li>不触发网络请求、利用缓存</li><li>支持直达文档内部位置与 SPA 视图切换</li><li>避免为同一内容的不同位置制造多份路径（更利于维护与 SEO）</li></ul></li></ul><p>顺序固定：如果两者共存，<code>?query</code> 在前，<code>#fragment</code> 在后，例如 <code>/products?category=book#reviews</code>。</p><h3 id="绝对-URL-与-相对-URL"><a href="#绝对-URL-与-相对-URL" class="headerlink" title="绝对 URL 与 相对 URL"></a>绝对 URL 与 相对 URL</h3><ul><li>绝对 URL：包含完整 <code>scheme://host:port/...</code>，适合跨站链接、分享、日志记录。</li><li>相对 URL：省略前缀，基于当前文档或 <code>&lt;base href&gt;</code> 解析为绝对 URL 后再请求：<ul><li>如 <code>about.html</code>、<code>../img/a.png</code>、<code>/assets/app.css</code>、<code>?page=2</code>、<code>#section</code>、<code>//cdn.example.com/lib.js</code>（继承协议）</li></ul></li><li>场景：<ul><li>相对 URL：站内导航、资源引用、多环境部署更灵活</li><li>绝对 URL：跨站、固定链接与外部分享更稳妥</li></ul></li></ul><h3 id="URL-编码（百分号编码）"><a href="#URL-编码（百分号编码）" class="headerlink" title="URL 编码（百分号编码）"></a>URL 编码（百分号编码）</h3><ul><li>目的：让任何字符都能安全放进 URL。URL 设计于早期互联网，默认仅可靠传 ASCII；同时 URL 中一些字符有保留含义（如 <code>? &amp; = # / % +</code>），作为数据出现时需编码以免歧义。</li><li>做法：按字节用 <code>%HH</code> 表示（常基于 UTF-8）。<ul><li>例：空格 → <code>%20</code>（表单默认可用 <code>+</code>），<code>你好</code> → <code>%E4%BD%A0%E5%A5%BD</code>，<code>Tom&amp;Jerry</code> → <code>Tom%26Jerry</code></li></ul></li><li>什么时候编码：<ul><li>非 ASCII 字符：中文、Emoji、欧元符号等</li><li>保留字符出现在参数值或键中</li></ul></li><li>注意：<ul><li>避免双重编码：<code>%20</code> 再编码会变 <code>%2520</code></li><li>位置差异：路径中的 <code>/</code> 通常不编码（表示层级）；查询字符串中的 <code>&amp;</code>、<code>=</code> 必须编码</li></ul></li></ul><h3 id="ASCII-是什么，为什么还需要编码"><a href="#ASCII-是什么，为什么还需要编码" class="headerlink" title="ASCII 是什么，为什么还需要编码"></a>ASCII 是什么，为什么还需要编码</h3><ul><li>ASCII 范围：0–127，共 128 个字符。32–126 为可见字符（空格、数字、字母、常用标点）。</li><li>ASCII 不够用的原因：<ul><li>多语言文本（中文、阿拉伯文、Emoji 等）不在 ASCII 内</li><li>URL 中大量保留字符用于语法（如 <code>?</code> 分隔查询、<code>#</code> 片段、<code>&amp;</code> 参数分隔、<code>=</code> 键值分隔等），当这些字符要作为“数据”出现时必须编码，避免被误解析</li></ul></li></ul><h3 id="file-与本地服务器"><a href="#file-与本地服务器" class="headerlink" title="file:// 与本地服务器"></a><code>file://</code> 与本地服务器</h3><ul><li><code>file://</code>：直接读取本地文件，很多 Web 能力受限（同源策略、AJAX、Cookie、Service Worker 等）。</li><li>开发&#x2F;调试通常建议使用本地开发服务器（如 <code>http://localhost:3000</code>）以贴近线上环境与安全模型。</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>scheme 决定“<strong>如何访问</strong>”，host:port 决定“<strong>连接哪里</strong>”，path 决定“<strong>哪个资源</strong>”，query 决定“<strong>传什么参数给服务器</strong>”，fragment 决定“<strong>资源内部的哪个位置&#x2F;状态（仅客户端）</strong>”。</li><li>URL 编码保证在仅支持 ASCII 的通道中，安全、无歧义地传输任意字符与数据。</li></ul>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS 盒模型：Margin vs Padding 的区别</title>
    <link href="/2025/08/24/CSS-%E7%9B%92%E6%A8%A1%E5%9E%8B%EF%BC%9AMargin-vs-Padding-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2025/08/24/CSS-%E7%9B%92%E6%A8%A1%E5%9E%8B%EF%BC%9AMargin-vs-Padding-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="CSS-盒模型：Margin-vs-Padding-的区别"><a href="#CSS-盒模型：Margin-vs-Padding-的区别" class="headerlink" title="CSS 盒模型：Margin vs Padding 的区别"></a>CSS 盒模型：Margin vs Padding 的区别</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>Padding（内边距）</strong></p><ul><li>定义：元素内容与边框之间的空间</li><li>作用区域：元素内部</li><li>背景色：会继承元素的背景色</li><li>盒模型位置：在边框内部</li><li><strong>对盒子大小的影响：会把盒子撑大</strong></li></ul><p><strong>Margin（外边距）</strong></p><ul><li>定义：元素边框与其他元素之间的空间</li><li>作用区域：元素外部</li><li>背景色：透明，不继承背景色</li><li>盒模型位置：在边框外部</li><li><strong>对盒子大小的影响：不会把盒子撑大</strong></li></ul><h3 id="盒模型-Margin-→-Border-→-Padding-→-Content"><a href="#盒模型-Margin-→-Border-→-Padding-→-Content" class="headerlink" title="盒模型:Margin → Border → Padding → Content"></a>盒模型:Margin → Border → Padding → Content</h3><p><img src="/pictures/%E7%9B%92%E6%A8%A1%E5%9E%8B.webp"></p><h3 id="对盒子大小的影响"><a href="#对盒子大小的影响" class="headerlink" title="对盒子大小的影响"></a>对盒子大小的影响</h3><p><strong>Padding 会把盒子撑大</strong></p><ul><li>原因：Padding 是元素内容与边框之间的空间，属于元素内部</li><li>效果：增加 padding 会让元素的实际显示区域变大</li><li>举例：如果元素原本是 100px × 100px，加上 20px 的 padding，实际显示大小就变成 140px × 140px</li></ul><p><strong>Margin 不会把盒子撑大</strong></p><ul><li>原因：Margin 是元素边框与其他元素之间的空间，属于元素外部</li><li>效果：增加 margin 只会改变元素与其他元素的距离，不会改变元素本身的大小</li><li>举例：如果元素原本是 100px × 100px，加上 20px 的 margin，元素本身还是 100px × 100px，只是与其他元素的距离增加了</li></ul><h3 id="在不同元素类型上的表现"><a href="#在不同元素类型上的表现" class="headerlink" title="在不同元素类型上的表现"></a>在不同元素类型上的表现</h3><p><strong>块级元素（如 div、p、h1-h6）</strong> ✅ 所有方向都有效</p><ul><li>可以设置上下左右的 margin 和 padding</li><li>垂直方向的 margin 和 padding 都会影响布局</li></ul><p><strong>行内元素（如 span、a、**<strong>em*</strong>*）</strong> ⚠️ 只有水平方向有效</p><ul><li>水平方向的 margin 和 padding 有效</li><li>垂直方向的 margin 和 padding 无效（不会影响布局）</li></ul><p><strong>行内块元素（display: inline-block）</strong> ✅ 所有方向都有效</p><ul><li>结合了行内和块级元素的优点</li><li>可以设置宽高，所有方向的 margin 和 padding 都有效</li></ul><h3 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h3><p><strong>Padding 适用场景：</strong></p><ul><li>按钮内边距</li><li>卡片内容与边框的距离</li><li>文本与容器边框的间距</li><li>需要背景色填充的区域</li><li><strong>想要按钮更大时</strong></li></ul><p><strong>Margin 适用场景：</strong></p><ul><li>元素之间的间距</li><li>页面布局</li><li>居中对齐</li><li>负边距实现特殊效果</li><li><strong>想要元素间距时</strong></li></ul><h3 id="重要特性"><a href="#重要特性" class="headerlink" title="重要特性"></a>重要特性</h3><p><strong>Margin 合并（Margin Collapse）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">.<span class="hljs-property">box1</span> &#123; margin-<span class="hljs-attr">bottom</span>: 20px; &#125;<br>.<span class="hljs-property">box2</span> &#123; margin-<span class="hljs-attr">top</span>: 30px; &#125;<br><span class="hljs-comment">/* 实际间距是 30px，不是 50px */</span><br></code></pre></td></tr></table></figure><p><strong>负值使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">/* Margin 可以为负值 */</span><br>.<span class="hljs-property">negative</span>-margin &#123; <span class="hljs-attr">margin</span>: -10px; &#125;<br><span class="hljs-comment">/* Padding 不能为负值 */</span><br>.<span class="hljs-property">negative</span>-padding &#123; <span class="hljs-attr">padding</span>: -10px; &#125;<br><span class="hljs-comment">/* 无效 */</span><br></code></pre></td></tr></table></figure><h3 id="记忆口诀"><a href="#记忆口诀" class="headerlink" title="记忆口诀"></a>记忆口诀</h3><p><strong>“外距透明可合并，内距有色不合并”</strong></p><ul><li>外距（margin）透明且可合并</li><li>内距（padding）有色且不合并</li></ul><p><strong>“内距撑大外距不”</strong></p><ul><li>内距（padding）会把盒子撑大</li><li>外距（margin）不会把盒子撑大</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>Margin</strong>：元素外部间距，透明背景，可以合并，不会撑大盒子</li><li><strong>Padding</strong>：元素内部间距，继承背景色，不会合并，会把盒子撑大</li><li><strong>选择原则</strong>：影响外部布局用 margin，影响内部间距用 padding</li><li><strong>大小影响</strong>：想要改变元素本身大小用 padding，想要改变元素间距用 margin</li></ul>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从静态页面到元宇宙：用第一性原理拆解前端技术演化史与学习路径</title>
    <link href="/2025/05/06/%E4%BB%8E%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E5%88%B0%E5%85%83%E5%AE%87%E5%AE%99%EF%BC%9A%E7%94%A8%E7%AC%AC%E4%B8%80%E6%80%A7%E5%8E%9F%E7%90%86%E6%8B%86%E8%A7%A3%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%BC%94%E5%8C%96%E5%8F%B2%E4%B8%8E%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/"/>
    <url>/2025/05/06/%E4%BB%8E%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E5%88%B0%E5%85%83%E5%AE%87%E5%AE%99%EF%BC%9A%E7%94%A8%E7%AC%AC%E4%B8%80%E6%80%A7%E5%8E%9F%E7%90%86%E6%8B%86%E8%A7%A3%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%BC%94%E5%8C%96%E5%8F%B2%E4%B8%8E%E5%AD%A6%E4%B9%A0%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h1 id="引言：初学者的困境与破局之道"><a href="#引言：初学者的困境与破局之道" class="headerlink" title="引言：初学者的困境与破局之道"></a>引言：初学者的困境与破局之道</h1><h3 id="1-为什么学前端越学越迷茫？"><a href="#1-为什么学前端越学越迷茫？" class="headerlink" title="1.为什么学前端越学越迷茫？"></a>1.为什么学前端越学越迷茫？</h3><blockquote><p><strong>“学不动了。”</strong></p></blockquote><p>这是大多数前端新手在接触 Webpack、Babel、状态管理库等工具时的真实感受。</p><p>jQuery、React、Vue、Angular、Svelte……这些名词像散落的珠子，而框架版本迭代的速度远超学习能力。</p><p>为什么会出现这种困境？</p><p>因为 90%的学习者陷入“工具驱动型学习”陷阱：只关注“如何用”，却从未理解“为什么存在”。</p><p>本文将用马斯克第一性原理解构前端发展史，带你用工程师思维梳理工具链本质，建立“从历史看未来”的认知框架。</p><p>最终目标：为初学者构建完整的前端知识坐标系，让学习效率提升 300%。</p><h3 id="2-如何用马斯克的学习法建立前端知识骨架？"><a href="#2-如何用马斯克的学习法建立前端知识骨架？" class="headerlink" title="2.如何用马斯克的学习法建立前端知识骨架？"></a>2.如何用马斯克的学习法建立前端知识骨架？</h3><p>马斯克学习法：很多人好奇马斯克的学习秘诀，马斯克曾在 Reddit 论坛里分享过他的学习方法，他的原话是：</p><p><strong><em>One bit of advice: it is important to view knowledge as sort of a semantic tree — make sure you understand the fundamental principles, i.e. the trunk and big branches, before you get into the leaves&#x2F;details or there is nothing for them to hang on to.</em></strong></p><p><strong><em>翻译过来就是：我们应当将知识看作一棵树，只有了解最基本的原理，也就是树干和树枝，才能深入研究细节，没有树干，树叶便无处附着。</em></strong></p><p><strong>Step 1：拆解「前端开发」的本质需求</strong></p><ul><li>第一性原理：”把数据（Data）高效转化为用户界面（UI）并处理交互（Interaction）”</li><li>衍生出三大核心能力：</li></ul><p><img src="/pictures/%E5%89%8D%E7%AB%AF%E6%9C%AC%E8%B4%A8.png"></p><p><strong>Step 2：建立「技术-问题」映射表</strong></p><table><thead><tr><th><strong>你遇到的困惑</strong></th><th><strong>底层问题</strong></th><th><strong>对应技术</strong></th></tr></thead><tbody><tr><td>“CSS 怎么写都乱套”</td><td>样式作用域失控</td><td>CSS Modules、Tailwind</td></tr><tr><td>“代码难以维护”</td><td>状态逻辑分散</td><td>Redux、Composition API</td></tr><tr><td>“项目启动太慢”</td><td>构建效率低下</td><td>Vite、TurboPack</td></tr></tbody></table><p><strong>Step 3：构建「最小必要</strong> <strong>知识树</strong> <strong>」</strong></p><ol><li>硬核基础（永远不变）：</li></ol><ul><li>浏览器工作原理（<strong><em>解析 → 渲染 → 事件循环</em></strong>）</li><li>HTTP 协议与 Web 安全（CORS、XSS）</li></ul><ol start="2"><li>现代开发护城河：</li></ol><ul><li>组件化思维（React&#x2F;Vue 核心设计思想）</li><li>工具链理解（从 Babel 到 Rust 编写的打包器）</li></ul><hr><h1 id="《前端工具进化论：从文档标签到元宇宙的底层逻辑》"><a href="#《前端工具进化论：从文档标签到元宇宙的底层逻辑》" class="headerlink" title="《前端工具进化论：从文档标签到元宇宙的底层逻辑》"></a>《前端工具进化论：从文档标签到元宇宙的底层逻辑》</h1><h2 id="前端技术演进的「四个时代」"><a href="#前端技术演进的「四个时代」" class="headerlink" title="前端技术演进的「四个时代」"></a><strong>前端技术演进的「四个时代」</strong></h2><table><thead><tr><th><strong>时代</strong></th><th><strong>核心需求</strong></th><th><strong>代表性技术</strong></th><th><strong>第一性原理</strong></th></tr></thead><tbody><tr><td>石器时代（1990s）</td><td>展示静态文档</td><td>HTML1.0、CSS1.0、表格布局</td><td>「文档标记语言」的本质</td></tr><tr><td>铁器时代（2000s）</td><td>动态交互</td><td>JavaScript、jQuery、AJAX</td><td>「浏览器作为运行时」的潜力</td></tr><tr><td>工业时代（2010s）</td><td>工程化与复杂应用</td><td>Webpack、React、TypeScript</td><td>「模块化」与「状态管理」的博弈</td></tr><tr><td>智能时代（2020s）</td><td>跨端与高性能</td><td>WASM、Web3、微前端、低代码</td><td>「前端边界」的持续突破</td></tr></tbody></table><ul><li><strong>总结：</strong> <strong><em>“所有新工具都是为了解决旧工具的「效率瓶颈」或「能力边界」”</em></strong></li></ul><h2 id="一、石器时代（1990-2004）：文档标记的本质"><a href="#一、石器时代（1990-2004）：文档标记的本质" class="headerlink" title="一、石器时代（1990-2004）：文档标记的本质"></a>一、石器时代（1990-2004）：文档标记的本质</h2><h3 id="核心需求：静态内容展示"><a href="#核心需求：静态内容展示" class="headerlink" title="核心需求：静态内容展示"></a>核心需求：<strong>静态内容展示</strong></h3><p><img src="/pictures/%E5%89%8D%E7%AB%AF%E6%A0%B8%E5%BF%83%E9%9C%80%E6%B1%82.png"></p><h3 id="关键技术解析"><a href="#关键技术解析" class="headerlink" title="关键技术解析"></a>关键技术解析</h3><table><thead><tr><th>技术</th><th>解决问题</th><th>设计缺陷</th><th>现代启示</th></tr></thead><tbody><tr><td>HTML 3.2</td><td>结构化文档</td><td>表现与内容混用</td><td>催生语义化 HTML5</td></tr><tr><td>CSS 1.0</td><td>基础样式分离</td><td>布局能力薄弱</td><td>推动 Flex&#x2F;Grid 布局</td></tr><tr><td>表格布局</td><td>实现复杂版面</td><td>代码臃肿</td><td>促进 CSS 布局革命</td></tr></tbody></table><p><strong>底层逻辑</strong>：</p><blockquote><p>“Tim Berners-Lee 创造 HTML 的初衷是用标签定义文档结构，而非设计精美网页”</p><p>→ 这解释了为什么早期需要<code>&lt;font&gt;</code>等表现性标签</p></blockquote><p><strong>启示：</strong></p><p><strong>工具的本质是降低认知成本。现代框架的虚拟</strong> <strong>DOM</strong> <strong>、响应式系统，本质上都是对“降低开发复杂度”这一需求的延续。</strong></p><hr><h2 id="二、铁器时代（2004-2010）：浏览器作为运行时"><a href="#二、铁器时代（2004-2010）：浏览器作为运行时" class="headerlink" title="二、铁器时代（2004-2010）：浏览器作为运行时"></a>二、铁器时代（2004-2010）：浏览器作为运行时</h2><h3 id="核心需求：动态交互体验"><a href="#核心需求：动态交互体验" class="headerlink" title="核心需求：动态交互体验"></a>核心需求：<strong>动态交互体验</strong></h3><p><img src="/pictures/%E5%8A%A8%E6%80%81%E4%BA%A4%E4%BA%92%E4%BD%93%E9%AA%8C.png"></p><h3 id="关键技术突破"><a href="#关键技术突破" class="headerlink" title="关键技术突破"></a>关键技术突破</h3><ol><li><strong>jQuery</strong> <strong>的必然性</strong>：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2005年浏览器兼容代码 vs jQuery方案</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">all</span>) &#123;<br>  <span class="hljs-comment">// IE</span><br>  elem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// Netscape</span><br>  elem = <span class="hljs-variable language_">document</span>.<span class="hljs-property">layers</span>[<span class="hljs-string">&quot;foo&quot;</span>];<br>&#125;<br><span class="hljs-comment">// jQuery只需：$(&#x27;#foo&#x27;)</span><br></code></pre></td></tr></table></figure><p><strong>第一性原理</strong>：用 CSS 选择器语法抽象浏览器差异</p><ol start="2"><li><strong>AJAX</strong> <strong>革命</strong>：</li></ol><p><img src="/pictures/Ajax%E9%9D%A9%E5%91%BD.png"></p><p><strong>第一性原理</strong>：用<code>fetch</code>或<code>XHR</code>异步请求数据，局部更新页面，避免整页刷新。</p><p><strong>核心价值：</strong> 让网页像 APP 一样流畅，不用每次都”闪屏刷新”。</p><h2 id="三、工业时代（2010-2016）：工程化革命"><a href="#三、工业时代（2010-2016）：工程化革命" class="headerlink" title="三、工业时代（2010-2016）：工程化革命"></a>三、工业时代（2010-2016）：工程化革命</h2><h3 id="核心需求：应对复杂应用开发"><a href="#核心需求：应对复杂应用开发" class="headerlink" title="核心需求：应对复杂应用开发"></a>核心需求：<strong>应对复杂应用开发</strong></h3><p><img src="/pictures/%E5%B7%A5%E4%B8%9A%E5%8C%96%E9%9D%A9%E5%91%BD.png"></p><h3 id="三大支柱技术"><a href="#三大支柱技术" class="headerlink" title="三大支柱技术"></a>三大支柱技术</h3><h4 id="1-Webpack-的诞生逻辑"><a href="#1-Webpack-的诞生逻辑" class="headerlink" title="1. Webpack 的诞生逻辑"></a>1. Webpack 的诞生逻辑</h4><p>假设有两个文件：</p><h5 id="文件-1：math-js"><a href="#文件-1：math-js" class="headerlink" title="文件 1：math.js"></a>文件 1：<code>math.js</code></h5><pre><code class="hljs">// math.jsfunction add(a, b) &#123;return a + b; &#125;    // 计算数字相加这个 add 函数会被挂载到全局作用域（window.add）。</code></pre><h5 id="文件-2：string-utils-js"><a href="#文件-2：string-utils-js" class="headerlink" title="文件 2：string-utils.js"></a>文件 2：<code>string-utils.js</code></h5><pre><code class="hljs">// string-utils.jsfunction add(str1, str2) &#123;return str1 + str2; &#125;    // 字符串拼接这个 add 函数也会被挂载到全局作用域（window.add）。</code></pre><h5 id="Webpack-如何解决这个问题？"><a href="#Webpack-如何解决这个问题？" class="headerlink" title="Webpack 如何解决这个问题？"></a><strong>Webpack 如何解决这个问题？</strong></h5><p>Webpack 使用<strong>模块化</strong> <strong>作用域</strong>，确保每个文件的变量和函数不会污染全局：</p><h5 id="改造后的代码（ES-Modules）"><a href="#改造后的代码（ES-Modules）" class="headerlink" title="改造后的代码（ES Modules）"></a>改造后的代码（ES Modules）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">// math.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123; <span class="hljs-keyword">return</span> a + b; &#125;<br><br><span class="hljs-comment">// string-utils.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">str1, str2</span>) &#123; <span class="hljs-keyword">return</span> str1 + str2; &#125;<br><br><span class="hljs-comment">// app.js</span><br><span class="hljs-keyword">import</span> &#123; add <span class="hljs-keyword">as</span> mathAdd &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./math.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; add <span class="hljs-keyword">as</span> strAdd &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./string-utils.js&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">mathAdd</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));       <span class="hljs-comment">// 3（数字相加）</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">strAdd</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>));      <span class="hljs-comment">// &quot;ab&quot;（字符串拼接）</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>关键点</strong>：</p><ul><li>每个文件的 <code>add</code> 函数<strong>互不干扰</strong>。</li><li>通过 <code>import &#123; ... as ... &#125;</code> 可以避免命名冲突。</li></ul></li></ul><h4 id="2-React-的设计哲学"><a href="#2-React-的设计哲学" class="headerlink" title="2. React 的设计哲学"></a>2. React 的设计哲学</h4><pre><code class="hljs">// 对比命令式与声明式// jQuery命令式$(&#39;#btn&#39;).click(function() &#123;  $(&#39;#counter&#39;).text(parseInt($(&#39;#counter&#39;).text()) + 1);&#125;);// React声明式function Counter() &#123;  const [count, setCount] = useState(0);  return &lt;button onClick=&#123;() =&gt; setCount(c =&gt; c + 1)&#125;&gt;&#123;count&#125;&lt;/button&gt;;&#125;</code></pre><ul><li><strong>第一性原理</strong>：UI 应是状态的函数（<code>UI = f(state)</code>）</li></ul><h4 id="3-TypeScript-的价值"><a href="#3-TypeScript-的价值" class="headerlink" title="3. TypeScript 的价值"></a>3. TypeScript 的价值</h4><pre><code class="hljs">// JavaScript的痛点function sum(a, b) &#123;  return a + b; // 可能被传入字符串&#125;// TypeScript解决方案function sum(a: number, b: number): number &#123;  return a + b;&#125;</code></pre><ul><li><strong>底层需求</strong>：大型应用需要编译时类型检查</li></ul><hr><h2 id="四、智能时代（2020-至今）：突破边界"><a href="#四、智能时代（2020-至今）：突破边界" class="headerlink" title="四、智能时代（2020-至今）：突破边界"></a>四、智能时代（2020-至今）：突破边界</h2><h3 id="核心需求：极致性能与多端统一"><a href="#核心需求：极致性能与多端统一" class="headerlink" title="核心需求：极致性能与多端统一"></a>核心需求：<strong>极致性能与多端统一</strong></h3><p><img src="/pictures/%E6%99%BA%E8%83%BD%E6%97%B6%E4%BB%A3.png"></p><h3 id="关键技术解析-1"><a href="#关键技术解析-1" class="headerlink" title="关键技术解析"></a>关键技术解析</h3><h4 id="1-WebAssembly-的突破"><a href="#1-WebAssembly-的突破" class="headerlink" title="1. WebAssembly 的突破"></a>1. WebAssembly 的突破</h4><p><strong>第一性原理</strong>：将低级语言（C&#x2F;C++&#x2F;Rust）编译为浏览器可执行的二进制格式，突破 JS 性能瓶颈。 <strong>代码示例</strong>：</p><pre><code class="hljs"> // add.cpp → add.wasmint add(int a, int b) &#123; return a + b; &#125;</code></pre><!----><pre><code class="hljs"> // 浏览器调用WebAssembly.instantiateStreaming(fetch(&#39;add.wasm&#39;)).then(obj =&gt; obj.instance.exports.add(2, 3)); // 5</code></pre><p><strong>核心价值</strong>：高性能计算（游戏&#x2F;音视频）在 Web 端原生运行。</p><h4 id="2-微前端架构"><a href="#2-微前端架构" class="headerlink" title="2. 微前端架构"></a>2. 微前端架构</h4><p><strong>第一性原理</strong>：将后端微服务思想移植到前端,把大系统拆成独立可组合的小应用</p><pre><code class="hljs">主框架（共享依赖）├─ 商品页（React应用）├─ 订单页（Vue应用）└─ 支付页（Angular应用）</code></pre><p><strong>核心价值</strong>： 各团队用不同技术开发，随时单独更新</p><h4 id="3-低代码平台的兴起"><a href="#3-低代码平台的兴起" class="headerlink" title="3. 低代码平台的兴起"></a>3. 低代码平台的兴起</h4><p><strong>第一性原理</strong>：用可视化拖拽代替手写代码 <strong>类比</strong>：</p><ul><li>传统开发 &#x3D; 从烧砖开始盖房</li><li>低代码 &#x3D; 用乐高积木搭房</li></ul><p><strong>操作示例</strong>：</p><pre><code class="hljs"> #传统代码（实现表单）&lt;form @submit=&quot;saveData&quot;&gt;&lt;input v-model=&quot;name&quot;&gt;&lt;button&gt;提交&lt;/button&gt;&lt;/form&gt;# 低代码（拖拽生成）[拖拽&quot;表单组件&quot; → 设置&quot;提交API&quot; → 自动生成代码]</code></pre><p><strong>核心价值</strong>： 业务人员也能快速搭建简单系统</p><hr><h2 id="五、工具演进的底层规律"><a href="#五、工具演进的底层规律" class="headerlink" title="五、工具演进的底层规律"></a>五、工具演进的底层规律</h2><ol><li><h3 id="越来越简单"><a href="#越来越简单" class="headerlink" title="越来越简单"></a><strong>越来越简单</strong></h3></li></ol><ul><li>以前：要写很多底层代码（如 DOM 操作）</li><li>现在：声明式写法（如 React）</li><li>例子：jQuery → Vue</li></ul><ol start="2"><li><h3 id="越来越快"><a href="#越来越快" class="headerlink" title="越来越快"></a><strong>越来越快</strong></h3></li></ol><ul><li>以前：JS 运行慢</li><li>现在：WASM 接近机器码速度</li><li>例子：网页游戏性能提升</li></ul><ol start="3"><li><h3 id="越来越灵活"><a href="#越来越灵活" class="headerlink" title="越来越灵活"></a><strong>越来越灵活</strong></h3></li></ol><ul><li>以前：整个页面一起更新</li><li>现在：可以单独更新某个组件</li><li>例子：微前端架构</li></ul><ol start="4"><li><h3 id="越来越智能"><a href="#越来越智能" class="headerlink" title="越来越智能"></a><strong>越来越智能</strong></h3></li></ol><ul><li><p>以前：全靠人工写代码</p></li><li><p>现在：AI 辅助生成代码</p></li><li><p>例子：低代码平台</p></li></ul><p><strong>一句话总结</strong>：</p><p>前端工具正在变得<strong>更简单、更快、更灵活、更智能</strong>，让开发者能更轻松地做出更好的网页应用。</p><h1 id="结语：认知复利的力量"><a href="#结语：认知复利的力量" class="headerlink" title="结语：认知复利的力量"></a>结语：认知复利的力量</h1><p>前端学习本质是认知结构的搭建。</p><p>当你用历史视角理解 Webpack 为何存在（解决模块化困局）、React 的虚拟 DOM 本质（用数据抽象优化性能损耗）、Babel 的核心价值（语法转换的编译思维）时，零散的名词会自动串联成「 <strong>解码器-地图-工具链</strong>」的认知体系。</p><p>所有技术都遵循「<strong>需求催生工具 → 工具塑造实践 → 实践反哺认知</strong>」的闭环。</p><p>与其追逐新名词，不如用历史思维构建自己的「技术演进逻辑网」，让学习从被动输入变为主动解码。</p><p>行动点： 下次学新工具时，可以尝试先问三个问题：</p><ol><li>它要解决什么历史问题？</li><li>它的核心设计原则是什么？</li><li>它与旧方案的本质差异在哪？</li></ol>]]></content>
    
    
    <categories>
      
      <category>学习方法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/03/hello-world/"/>
    <url>/2025/04/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
